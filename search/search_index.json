{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyGenomeViz","text":"<p>Major Version Upgrade v1.0.0</p> <p>A major version upgrade, pyGenomeViz v1.0.0, was released on 2024/05. Backward incompatible changes have been made between v1.0.0 and v0.X.X to make for a more sophisticated API/CLI design. Therefore, v0.X.X users should pin the version to v0.4.4 or update existing code for v1.0.0. Previous v0.4.4 documentation is available here.</p>"},{"location":"#overview","title":"Overview","text":"<p>pyGenomeViz is a genome visualization python package for comparative genomics implemented based on matplotlib. This package is developed for the purpose of easily and beautifully plotting genomic features and sequence similarity comparison links between multiple genomes. It supports genome visualization of Genbank/GFF format file and can be saved figure in various formats (JPG/PNG/SVG/PDF/HTML). User can use pyGenomeViz for interactive genome visualization figure plotting on jupyter notebook, or automatic genome visualization figure plotting in genome analysis scripts/pipelines.</p> <p> </p> pyGenomeViz example plot gallery <p> </p>      Interactive HTML Viewer (Demo Page1, Demo Page2)    <p> </p>      pyGenomeViz web application example (Demo Page)"},{"location":"#installation","title":"Installation","text":"<p><code>Python 3.9 or later</code> is required for installation.</p> <p>Install PyPI package:</p> <pre><code>pip install pygenomeviz\n</code></pre> <p>Install conda-forge package:</p> <pre><code>conda install -c conda-forge pygenomeviz\n</code></pre> <p>Use Docker (Image Registry):</p> <pre><code>docker run -it --rm -p 8501:8501 ghcr.io/moshi4/pygenomeviz:latest pgv-gui -h\n</code></pre>"},{"location":"example_gallery/","title":"Example Gallery","text":"In\u00a0[1]: Copied! <pre># !pip install pygenomeviz\n# !apt install ncbi-blast+ mummer mmseqs2\n</pre> # !pip install pygenomeviz # !apt install ncbi-blast+ mummer mmseqs2 In\u00a0[2]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\nfrom pygenomeviz.align import Blast, AlignCoord\n\ngbk_files = load_example_genbank_dataset(\"yersinia_phage\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(track_align_type=\"center\")\ngv.set_scale_bar()\n\n# Plot CDS features\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)\n    for seqid, features in gbk.get_seqid2features(\"CDS\").items():\n        segment = track.get_segment(seqid)\n        segment.add_features(features, plotstyle=\"bigarrow\", fc=\"limegreen\", lw=0.5)\n\n# Run BLAST alignment &amp; filter by user-defined threshold\nalign_coords = Blast(gbk_list, seqtype=\"protein\").run()\nalign_coords = AlignCoord.filter(align_coords, length_thr=100, identity_thr=30)\n\n# Plot BLAST alignment links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"grey\", \"red\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident)\n\nfig = gv.plotfig()\n# gv.savefig(\"result.png\")\n# gv.savefig_html(\"result.html\")\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset from pygenomeviz.align import Blast, AlignCoord  gbk_files = load_example_genbank_dataset(\"yersinia_phage\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(track_align_type=\"center\") gv.set_scale_bar()  # Plot CDS features for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)     for seqid, features in gbk.get_seqid2features(\"CDS\").items():         segment = track.get_segment(seqid)         segment.add_features(features, plotstyle=\"bigarrow\", fc=\"limegreen\", lw=0.5)  # Run BLAST alignment &amp; filter by user-defined threshold align_coords = Blast(gbk_list, seqtype=\"protein\").run() align_coords = AlignCoord.filter(align_coords, length_thr=100, identity_thr=30)  # Plot BLAST alignment links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"grey\", \"red\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)     gv.set_colorbar([color, inverted_color], vmin=min_ident)  fig = gv.plotfig() # gv.savefig(\"result.png\") # gv.savefig_html(\"result.html\") In\u00a0[3]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\nfrom pygenomeviz.align import MMseqs\n\ngbk_files = load_example_genbank_dataset(\"enterobacteria_phage\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(fig_track_height=0.8, feature_track_ratio=0.4)\ngv.set_scale_xticks()\n\n# Plot CDS features\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)\n    for seqid, features in gbk.get_seqid2features(\"CDS\").items():\n        segment = track.get_segment(seqid)\n        segment.add_features(features, fc=\"skyblue\", lw=0.5)\n\n# Run MMseqs RBH search\nalign_coords = MMseqs(gbk_list).run()\n\n# Plot MMseqs RBH search links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"chocolate\", \"limegreen\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, curve=True)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset from pygenomeviz.align import MMseqs  gbk_files = load_example_genbank_dataset(\"enterobacteria_phage\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(fig_track_height=0.8, feature_track_ratio=0.4) gv.set_scale_xticks()  # Plot CDS features for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)     for seqid, features in gbk.get_seqid2features(\"CDS\").items():         segment = track.get_segment(seqid)         segment.add_features(features, fc=\"skyblue\", lw=0.5)  # Run MMseqs RBH search align_coords = MMseqs(gbk_list).run()  # Plot MMseqs RBH search links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"chocolate\", \"limegreen\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, curve=True)     gv.set_colorbar([color, inverted_color], vmin=min_ident)  fig = gv.plotfig() In\u00a0[4]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\nfrom pygenomeviz.align import MMseqs\n\ngbk_files = load_example_genbank_dataset(\"acinetobacter_phage\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(fig_track_height=0.8, feature_track_ratio=0.4)\ngv.set_scale_xticks()\n\n# Plot CDS features\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)\n    for seqid, features in gbk.get_seqid2features(\"CDS\").items():\n        segment = track.get_segment(seqid)\n        segment.add_features(features, fc=\"lightgreen\", lw=0.2)\n\n# Run MMseqs RBH search\nalign_coords = MMseqs(gbk_list).run()\n\n# Plot MMseqs RBH search links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"skyblue\", \"salmon\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, curve=True)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident)\n\nfig = gv.plotfig()\n</pre>  from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset from pygenomeviz.align import MMseqs  gbk_files = load_example_genbank_dataset(\"acinetobacter_phage\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(fig_track_height=0.8, feature_track_ratio=0.4) gv.set_scale_xticks()  # Plot CDS features for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)     for seqid, features in gbk.get_seqid2features(\"CDS\").items():         segment = track.get_segment(seqid)         segment.add_features(features, fc=\"lightgreen\", lw=0.2)  # Run MMseqs RBH search align_coords = MMseqs(gbk_list).run()  # Plot MMseqs RBH search links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"skyblue\", \"salmon\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, curve=True)     gv.set_colorbar([color, inverted_color], vmin=min_ident)  fig = gv.plotfig() In\u00a0[5]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature\nfrom pygenomeviz.align import MUMmer\n\ngbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz()\ngv.set_scale_bar()\n\n# Plot CDS, rRNA features for each contig to tracks\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)\n    for seqid, features in gbk.get_seqid2features(None).items():\n        segment = track.get_segment(seqid)\n        for feature in features:\n            if feature.type == \"CDS\":\n                # CDS: blue, CDS(pseudo): grey\n                color = \"grey\" if is_pseudo_feature(feature) else \"blue\"\n                segment.add_features(feature, fc=color)\n            elif feature.type == \"rRNA\":\n                # rRNA: lime\n                segment.add_features(feature, fc=\"lime\")\n\n# Run MUMmer alignment\nalign_coords = MUMmer(gbk_list).run()\n\n# Plot MUMmer alignment links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"grey\", \"red\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature from pygenomeviz.align import MUMmer  gbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz() gv.set_scale_bar()  # Plot CDS, rRNA features for each contig to tracks for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)     for seqid, features in gbk.get_seqid2features(None).items():         segment = track.get_segment(seqid)         for feature in features:             if feature.type == \"CDS\":                 # CDS: blue, CDS(pseudo): grey                 color = \"grey\" if is_pseudo_feature(feature) else \"blue\"                 segment.add_features(feature, fc=color)             elif feature.type == \"rRNA\":                 # rRNA: lime                 segment.add_features(feature, fc=\"lime\")  # Run MUMmer alignment align_coords = MUMmer(gbk_list).run()  # Plot MUMmer alignment links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"grey\", \"red\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)     gv.set_colorbar([color, inverted_color], vmin=min_ident)  fig = gv.plotfig() In\u00a0[1]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.align import MUMmer\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset, ColorCycler\nColorCycler.set_cmap(\"Set2\")\n\ngbk_files = load_example_genbank_dataset(\"escherichia_coli\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(fig_track_height=0.8, feature_track_ratio=0.05)\ngv.set_scale_xticks(ymargin=3.0)\n\n# Plot chromosomes\nfor gbk in gbk_list:\n    color = ColorCycler()\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), space=0.01, label_kws=dict(color=color))\n    for segment in track.segments:\n        segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)\n\n# Run MUMmer alignment\nalign_coords = MUMmer(gbk_list).run()\n\n# Plot MUMmer alignment links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"olive\", \"purple\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.align import MUMmer from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset, ColorCycler ColorCycler.set_cmap(\"Set2\")  gbk_files = load_example_genbank_dataset(\"escherichia_coli\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(fig_track_height=0.8, feature_track_ratio=0.05) gv.set_scale_xticks(ymargin=3.0)  # Plot chromosomes for gbk in gbk_list:     color = ColorCycler()     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), space=0.01, label_kws=dict(color=color))     for segment in track.segments:         segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)  # Run MUMmer alignment align_coords = MUMmer(gbk_list).run()  # Plot MUMmer alignment links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"olive\", \"purple\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)     gv.set_colorbar([color, inverted_color], vmin=min_ident)  fig = gv.plotfig() In\u00a0[2]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.align import MUMmer\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset, ColorCycler\nColorCycler.set_cmap(\"tab10\")\n\ngbk_files = load_example_genbank_dataset(\"saccharomyces\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(feature_track_ratio=0.1)\ngv.set_scale_bar(ymargin=2.0)\n\n# Plot chromosomes\nfor gbk in gbk_list:\n    color = ColorCycler()\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), space=0.01, label_kws=dict(color=color))\n    track.set_label(track.name.replace(\"_\", \"\\n\"))\n    for segment in track.segments:\n        segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)\n\n# Run MUMmer alignment\nalign_coords = MUMmer(gbk_list).run()\n\n# Plot MUMmer alignment links\nif len(align_coords) &gt; 0:\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=\"grey\", inverted_color=\"red\", curve=True, filter_length=1000)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.align import MUMmer from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset, ColorCycler ColorCycler.set_cmap(\"tab10\")  gbk_files = load_example_genbank_dataset(\"saccharomyces\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(feature_track_ratio=0.1) gv.set_scale_bar(ymargin=2.0)  # Plot chromosomes for gbk in gbk_list:     color = ColorCycler()     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), space=0.01, label_kws=dict(color=color))     track.set_label(track.name.replace(\"_\", \"\\n\"))     for segment in track.segments:         segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)  # Run MUMmer alignment align_coords = MUMmer(gbk_list).run()  # Plot MUMmer alignment links if len(align_coords) &gt; 0:     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=\"grey\", inverted_color=\"red\", curve=True, filter_length=1000)  fig = gv.plotfig()"},{"location":"example_gallery/#yersinia-phage","title":"Yersinia phage\u00b6","text":""},{"location":"example_gallery/#enterobacteria-phage","title":"Enterobacteria phage\u00b6","text":""},{"location":"example_gallery/#acinetobacter-phage","title":"Acinetobacter phage\u00b6","text":""},{"location":"example_gallery/#mycoplasma-mycoides","title":"Mycoplasma mycoides\u00b6","text":""},{"location":"example_gallery/#escherichia-coli","title":"Escherichia coli\u00b6","text":""},{"location":"example_gallery/#saccharomyces","title":"Saccharomyces\u00b6","text":""},{"location":"getting_started/","title":"Getting Started","text":"In\u00a0[1]: Copied! <pre># !pip install pygenomeviz\n# !apt install ncbi-blast+ mummer mmseqs2\n</pre> # !pip install pygenomeviz # !apt install ncbi-blast+ mummer mmseqs2 In\u00a0[2]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngv = GenomeViz()\n\ntrack = gv.add_feature_track(\"tutorial\", 1000)\ntrack.add_sublabel()\n\nfig = gv.plotfig()\n# gv.savefig(\"example.png\")\n# gv.savefig_html(\"example.html\")\n</pre> from pygenomeviz import GenomeViz  gv = GenomeViz()  track = gv.add_feature_track(\"tutorial\", 1000) track.add_sublabel()  fig = gv.plotfig() # gv.savefig(\"example.png\") # gv.savefig_html(\"example.html\") In\u00a0[3]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngv = GenomeViz()\ngv.set_scale_xticks(ymargin=0.5)\n\ntrack = gv.add_feature_track(\"tutorial\", 1000)\ntrack.add_sublabel()\n\n# Add features to track\ntrack.add_feature(50, 200, 1)\ntrack.add_feature(250, 460, -1, fc=\"blue\")\ntrack.add_feature(500, 710, 1, fc=\"lime\")\ntrack.add_feature(750, 960, 1, fc=\"magenta\", lw=1.0)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  gv = GenomeViz() gv.set_scale_xticks(ymargin=0.5)  track = gv.add_feature_track(\"tutorial\", 1000) track.add_sublabel()  # Add features to track track.add_feature(50, 200, 1) track.add_feature(250, 460, -1, fc=\"blue\") track.add_feature(500, 710, 1, fc=\"lime\") track.add_feature(750, 960, 1, fc=\"magenta\", lw=1.0)  fig = gv.plotfig() In\u00a0[4]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngv = GenomeViz()\ngv.set_scale_bar(ymargin=0.5)\n\ntrack = gv.add_feature_track(\"tutorial\", (1000, 2000))\ntrack.add_sublabel()\n\n# Add styled features\ntrack.add_feature(1050, 1150, 1, label=\"arrow\")\ntrack.add_feature(1200, 1300, -1, plotstyle=\"bigarrow\", label=\"bigarrow\", fc=\"red\", lw=1)\ntrack.add_feature(1330, 1400, 1, plotstyle=\"bigbox\", label=\"bigbox\", fc=\"blue\", text_kws=dict(rotation=0, hpos=\"center\"))\ntrack.add_feature(1420, 1500, 1, plotstyle=\"box\", label=\"box\", fc=\"limegreen\", text_kws=dict(size=10, color=\"blue\"))\ntrack.add_feature(1550, 1600, 1, plotstyle=\"bigrbox\", label=\"bigrbox\", fc=\"magenta\", ec=\"blue\", lw=1, text_kws=dict(rotation=0, vpos=\"bottom\", hpos=\"center\"))\ntrack.add_feature(1650, 1750, -1, plotstyle=\"rbox\", label=\"rbox\", fc=\"grey\", text_kws=dict(rotation=-45, vpos=\"bottom\"))\ntrack.add_feature(1780, 1880, 1, fc=\"lime\", hatch=\"o\", arrow_shaft_ratio=0.2, label=\"arrow shaft\\n0.2\", text_kws=dict(rotation=0, hpos=\"center\"))\ntrack.add_feature(1890, 1990, 1, fc=\"lime\", hatch=\"/\", arrow_shaft_ratio=1.0, label=\"arrow shaft\\n1.0\", text_kws=dict(rotation=0, hpos=\"center\"))\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  gv = GenomeViz() gv.set_scale_bar(ymargin=0.5)  track = gv.add_feature_track(\"tutorial\", (1000, 2000)) track.add_sublabel()  # Add styled features track.add_feature(1050, 1150, 1, label=\"arrow\") track.add_feature(1200, 1300, -1, plotstyle=\"bigarrow\", label=\"bigarrow\", fc=\"red\", lw=1) track.add_feature(1330, 1400, 1, plotstyle=\"bigbox\", label=\"bigbox\", fc=\"blue\", text_kws=dict(rotation=0, hpos=\"center\")) track.add_feature(1420, 1500, 1, plotstyle=\"box\", label=\"box\", fc=\"limegreen\", text_kws=dict(size=10, color=\"blue\")) track.add_feature(1550, 1600, 1, plotstyle=\"bigrbox\", label=\"bigrbox\", fc=\"magenta\", ec=\"blue\", lw=1, text_kws=dict(rotation=0, vpos=\"bottom\", hpos=\"center\")) track.add_feature(1650, 1750, -1, plotstyle=\"rbox\", label=\"rbox\", fc=\"grey\", text_kws=dict(rotation=-45, vpos=\"bottom\")) track.add_feature(1780, 1880, 1, fc=\"lime\", hatch=\"o\", arrow_shaft_ratio=0.2, label=\"arrow shaft\\n0.2\", text_kws=dict(rotation=0, hpos=\"center\")) track.add_feature(1890, 1990, 1, fc=\"lime\", hatch=\"/\", arrow_shaft_ratio=1.0, label=\"arrow shaft\\n1.0\", text_kws=dict(rotation=0, hpos=\"center\"))  fig = gv.plotfig() In\u00a0[5]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngv = GenomeViz()\ngv.set_scale_bar(ymargin=0.5)\n\n# Set multi segments on track\ngenome_size_list = (100000, 180000, 150000)\ntrack = gv.add_feature_track(\"tutorial\", genome_size_list)\n\nfor segment in track.segments:\n    segment.add_sublabel(f\"{segment.name}: {segment.start:,} - {segment.end:,} bp\")\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  gv = GenomeViz() gv.set_scale_bar(ymargin=0.5)  # Set multi segments on track genome_size_list = (100000, 180000, 150000) track = gv.add_feature_track(\"tutorial\", genome_size_list)  for segment in track.segments:     segment.add_sublabel(f\"{segment.name}: {segment.start:,} - {segment.end:,} bp\")  fig = gv.plotfig() In\u00a0[6]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.utils import ColorCycler\nColorCycler.set_cmap(\"Set3\")\n\nfeatures = ((1200, 1500, 1), (1600, 1960, -1), (4200, 4800, 1), (4900, 5180, -1), (5200, 5500, 1), (7000, 7600, -1), (7800, 8200, 1))\n\ngv = GenomeViz()\ngv.set_scale_bar(ymargin=0.5)\n\n# Set multi segments on track\ntarget_regions = dict(region1=(1000, 2000), region2=(4000, 5500), region3=(7000, 8200))\ntrack = gv.add_feature_track(\"tutorial\", target_regions)\ntrack.set_segment_sep()\n\nfor segment in track.segments:\n    segment.add_sublabel(f\"{segment.name}: {segment.start:,} - {segment.end:,} bp\")\n    # Add feature to segment\n    for feature in features:\n        start, end, strand = feature\n        if segment.start &lt;= start &lt;= end &lt;= segment.end:\n            segment.add_feature(start, end, strand, fc=ColorCycler(), lw=1.0)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.utils import ColorCycler ColorCycler.set_cmap(\"Set3\")  features = ((1200, 1500, 1), (1600, 1960, -1), (4200, 4800, 1), (4900, 5180, -1), (5200, 5500, 1), (7000, 7600, -1), (7800, 8200, 1))  gv = GenomeViz() gv.set_scale_bar(ymargin=0.5)  # Set multi segments on track target_regions = dict(region1=(1000, 2000), region2=(4000, 5500), region3=(7000, 8200)) track = gv.add_feature_track(\"tutorial\", target_regions) track.set_segment_sep()  for segment in track.segments:     segment.add_sublabel(f\"{segment.name}: {segment.start:,} - {segment.end:,} bp\")     # Add feature to segment     for feature in features:         start, end, strand = feature         if segment.start &lt;= start &lt;= end &lt;= segment.end:             segment.add_feature(start, end, strand, fc=ColorCycler(), lw=1.0)  fig = gv.plotfig() In\u00a0[7]: Copied! <pre>from pygenomeviz import GenomeViz\n\nexon_regions1 = [(0, 210), (300, 480), (590, 800), (850, 1000), (1030, 1300)]\nexon_regions2 = [(1500, 1710), (2000, 2480), (2590, 2800)]\nexon_regions3 = [(3000, 3300), (3400, 3690), (3800, 4100), (4200, 4620)]\n\ngv = GenomeViz()\ntrack = gv.add_feature_track(\"Exon Features\", 5000)\n\n# Add exon features\ntrack.add_exon_feature(exon_regions1, strand=1, plotstyle=\"box\", label=\"box\", text_kws=dict(rotation=0, hpos=\"center\"))\ntrack.add_exon_feature(exon_regions2, strand=-1, plotstyle=\"arrow\", label=\"arrow\", text_kws=dict(rotation=0, vpos=\"bottom\", hpos=\"center\"), patch_kws=dict(fc=\"darkgrey\"), intron_patch_kws=dict(ec=\"red\"))\ntrack.add_exon_feature(exon_regions3, strand=1, plotstyle=\"bigarrow\", label=\"bigarrow\", text_kws=dict(rotation=0, hpos=\"center\"), patch_kws=dict(fc=\"lime\", lw=1))\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  exon_regions1 = [(0, 210), (300, 480), (590, 800), (850, 1000), (1030, 1300)] exon_regions2 = [(1500, 1710), (2000, 2480), (2590, 2800)] exon_regions3 = [(3000, 3300), (3400, 3690), (3800, 4100), (4200, 4620)]  gv = GenomeViz() track = gv.add_feature_track(\"Exon Features\", 5000)  # Add exon features track.add_exon_feature(exon_regions1, strand=1, plotstyle=\"box\", label=\"box\", text_kws=dict(rotation=0, hpos=\"center\")) track.add_exon_feature(exon_regions2, strand=-1, plotstyle=\"arrow\", label=\"arrow\", text_kws=dict(rotation=0, vpos=\"bottom\", hpos=\"center\"), patch_kws=dict(fc=\"darkgrey\"), intron_patch_kws=dict(ec=\"red\")) track.add_exon_feature(exon_regions3, strand=1, plotstyle=\"bigarrow\", label=\"bigarrow\", text_kws=dict(rotation=0, hpos=\"center\"), patch_kws=dict(fc=\"lime\", lw=1))  fig = gv.plotfig() In\u00a0[8]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngenome_list = [\n    dict(name=\"genome 01\", size=1000, features=((150, 300, 1), (500, 700, -1), (750, 950, 1))),\n    dict(name=\"genome 02\", size=1300, features=((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))),\n    dict(name=\"genome 03\", size=1200, features=((150, 300, 1), (350, 450, -1), (500, 700, -1), (700, 900, -1))),\n]\n\ngv = GenomeViz()\ngv.set_scale_xticks()\n\n# Set multi tracks &amp; features\nfor genome in genome_list:\n    name, size, features = genome[\"name\"], genome[\"size\"], genome[\"features\"]\n    track = gv.add_feature_track(name, size)\n    for feature in features:\n        start, end, strand = feature\n        track.add_feature(start, end, strand, plotstyle=\"bigarrow\", lw=1.0)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  genome_list = [     dict(name=\"genome 01\", size=1000, features=((150, 300, 1), (500, 700, -1), (750, 950, 1))),     dict(name=\"genome 02\", size=1300, features=((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))),     dict(name=\"genome 03\", size=1200, features=((150, 300, 1), (350, 450, -1), (500, 700, -1), (700, 900, -1))), ]  gv = GenomeViz() gv.set_scale_xticks()  # Set multi tracks &amp; features for genome in genome_list:     name, size, features = genome[\"name\"], genome[\"size\"], genome[\"features\"]     track = gv.add_feature_track(name, size)     for feature in features:         start, end, strand = feature         track.add_feature(start, end, strand, plotstyle=\"bigarrow\", lw=1.0)  fig = gv.plotfig() In\u00a0[9]: Copied! <pre>from pygenomeviz import GenomeViz\n\ngenome_list = [\n    dict(name=\"genome 01\", size=1000, features=((150, 300, 1), (500, 700, -1), (750, 950, 1))),\n    dict(name=\"genome 02\", size=1300, features=((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))),\n    dict(name=\"genome 03\", size=1200, features=((150, 300, 1), (350, 450, -1), (500, 700, -1), (700, 900, -1))),\n]\n\ngv = GenomeViz(track_align_type=\"center\")\ngv.set_scale_bar()\n\n# Set multi tracks &amp; features\nfor genome in genome_list:\n    name, size, features = genome[\"name\"], genome[\"size\"], genome[\"features\"]\n    track = gv.add_feature_track(name, size)\n    track.add_sublabel()\n    for idx, feature in enumerate(features, 1):\n        start, end, strand = feature\n        track.add_feature(start, end, strand, plotstyle=\"bigarrow\", lw=1, label=f\"gene{idx:02d}\", text_kws=dict(rotation=0, vpos=\"top\", hpos=\"center\"))\n\n# Add links between \"genome 01\" and \"genome 02\"\ngv.add_link((\"genome 01\", 150, 300), (\"genome 02\", 50, 200))\ngv.add_link((\"genome 01\", 700, 500), (\"genome 02\", 900, 700))\ngv.add_link((\"genome 01\", 750, 950), (\"genome 02\", 1150, 950))\n# Add links between \"genome 02\" and \"genome 03\"\ngv.add_link((\"genome 02\", 50, 200), (\"genome 03\", 150, 300), color=\"skyblue\", inverted_color=\"lime\", curve=True)\ngv.add_link((\"genome 02\", 350, 450), (\"genome 03\", 450, 350), color=\"skyblue\", inverted_color=\"lime\", curve=True)\ngv.add_link((\"genome 02\", 900, 700), (\"genome 03\", 700, 500), color=\"skyblue\", inverted_color=\"lime\", curve=True)\ngv.add_link((\"genome 03\", 900, 700), (\"genome 02\", 1150, 950), color=\"skyblue\", inverted_color=\"lime\", curve=True)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz  genome_list = [     dict(name=\"genome 01\", size=1000, features=((150, 300, 1), (500, 700, -1), (750, 950, 1))),     dict(name=\"genome 02\", size=1300, features=((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))),     dict(name=\"genome 03\", size=1200, features=((150, 300, 1), (350, 450, -1), (500, 700, -1), (700, 900, -1))), ]  gv = GenomeViz(track_align_type=\"center\") gv.set_scale_bar()  # Set multi tracks &amp; features for genome in genome_list:     name, size, features = genome[\"name\"], genome[\"size\"], genome[\"features\"]     track = gv.add_feature_track(name, size)     track.add_sublabel()     for idx, feature in enumerate(features, 1):         start, end, strand = feature         track.add_feature(start, end, strand, plotstyle=\"bigarrow\", lw=1, label=f\"gene{idx:02d}\", text_kws=dict(rotation=0, vpos=\"top\", hpos=\"center\"))  # Add links between \"genome 01\" and \"genome 02\" gv.add_link((\"genome 01\", 150, 300), (\"genome 02\", 50, 200)) gv.add_link((\"genome 01\", 700, 500), (\"genome 02\", 900, 700)) gv.add_link((\"genome 01\", 750, 950), (\"genome 02\", 1150, 950)) # Add links between \"genome 02\" and \"genome 03\" gv.add_link((\"genome 02\", 50, 200), (\"genome 03\", 150, 300), color=\"skyblue\", inverted_color=\"lime\", curve=True) gv.add_link((\"genome 02\", 350, 450), (\"genome 03\", 450, 350), color=\"skyblue\", inverted_color=\"lime\", curve=True) gv.add_link((\"genome 02\", 900, 700), (\"genome 03\", 700, 500), color=\"skyblue\", inverted_color=\"lime\", curve=True) gv.add_link((\"genome 03\", 900, 700), (\"genome 02\", 1150, 950), color=\"skyblue\", inverted_color=\"lime\", curve=True)  fig = gv.plotfig() In\u00a0[10]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.utils import ColorCycler\nColorCycler.set_cmap(\"tab10\")\n\nname2chr_segments = dict(\n    chimp=dict(chr1=224244399, chr2A=108022953, chr2B=128755405, chr3=196562556, chr4=189151597, chr5=159319378, chr6=168369391, chr7=156046543, chr8=143338810, chr9=110513671, chr10=129809613, chr11=130782606, chr12=130995916, chr13=95599650, chr14=87716528, chr15=80519282, chr16=75912362, chr17=76554115, chr18=74774469, chr19=56733099, chr20=64035432, chr21=33232379, chr22=33698415, chrX=151576176, chrY=26350515),\n    human=dict(chr1=248956422, chr2=242193529, chr3=198295559, chr4=190214555, chr5=181538259, chr6=170805979, chr7=159345973, chr8=145138636, chr9=138394717, chr10=133797422, chr11=135086622, chr12=133275309, chr13=114364328, chr14=107043718, chr15=101991189, chr16=90338345, chr17=83257441, chr18=80373285, chr19=58617616, chr20=64444167, chr21=46709983, chr22=50818468, chrX=156040895, chrY=57227415),\n    mouse=dict(chr1=195471971, chr2=182113224, chr3=160039680, chr4=156508116, chr5=151834684, chr6=149736546, chr7=145441459, chr8=129401213, chr9=124595110, chr10=130694993, chr11=122082543, chr12=120129022, chr13=120421639, chr14=124902244, chr15=104043685, chr16=98207768, chr17=94987271, chr18=90702639, chr19=61431566, chrX=171031299, chrY=91744698),\n)\n\ngv = GenomeViz(fig_track_height=0.7, feature_track_ratio=0.15, track_align_type=\"center\")\ngv.set_scale_bar(ymargin=2)\n\nfor name, chr_segments in name2chr_segments.items():\n    color = ColorCycler()\n    # Set chromosomes as segments\n    track = gv.add_feature_track(\n        name, chr_segments, space=0.01, align_label=False, label_kws=dict(color=color),\n    )\n    for seg in track.segments:\n        seg.add_feature(\n            seg.start,\n            seg.end,\n            plotstyle=\"bigrbox\",\n            fc=color,\n            ec=\"black\",\n            lw=0.5,\n            label=seg.name.replace(\"chr\", \"\"),\n            text_kws=dict(rotation=0, size=8, color=\"white\", vpos=\"center\", hpos=\"center\"),\n        )\n\ngv.add_link((\"human\", \"chr1\", 0, 100000000), (\"chimp\", \"chr1\", 0, 100000000))\ngv.add_link((\"human\", \"chr2\", 0, 120000000), (\"chimp\", \"chr2A\", 0, 108022953), color=\"lime\", curve=True)\ngv.add_link((\"human\", \"chr2\", 120000000, 242193529), (\"chimp\", \"chr2B\", 0, 128755405), color=\"lime\", curve=True)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.utils import ColorCycler ColorCycler.set_cmap(\"tab10\")  name2chr_segments = dict(     chimp=dict(chr1=224244399, chr2A=108022953, chr2B=128755405, chr3=196562556, chr4=189151597, chr5=159319378, chr6=168369391, chr7=156046543, chr8=143338810, chr9=110513671, chr10=129809613, chr11=130782606, chr12=130995916, chr13=95599650, chr14=87716528, chr15=80519282, chr16=75912362, chr17=76554115, chr18=74774469, chr19=56733099, chr20=64035432, chr21=33232379, chr22=33698415, chrX=151576176, chrY=26350515),     human=dict(chr1=248956422, chr2=242193529, chr3=198295559, chr4=190214555, chr5=181538259, chr6=170805979, chr7=159345973, chr8=145138636, chr9=138394717, chr10=133797422, chr11=135086622, chr12=133275309, chr13=114364328, chr14=107043718, chr15=101991189, chr16=90338345, chr17=83257441, chr18=80373285, chr19=58617616, chr20=64444167, chr21=46709983, chr22=50818468, chrX=156040895, chrY=57227415),     mouse=dict(chr1=195471971, chr2=182113224, chr3=160039680, chr4=156508116, chr5=151834684, chr6=149736546, chr7=145441459, chr8=129401213, chr9=124595110, chr10=130694993, chr11=122082543, chr12=120129022, chr13=120421639, chr14=124902244, chr15=104043685, chr16=98207768, chr17=94987271, chr18=90702639, chr19=61431566, chrX=171031299, chrY=91744698), )  gv = GenomeViz(fig_track_height=0.7, feature_track_ratio=0.15, track_align_type=\"center\") gv.set_scale_bar(ymargin=2)  for name, chr_segments in name2chr_segments.items():     color = ColorCycler()     # Set chromosomes as segments     track = gv.add_feature_track(         name, chr_segments, space=0.01, align_label=False, label_kws=dict(color=color),     )     for seg in track.segments:         seg.add_feature(             seg.start,             seg.end,             plotstyle=\"bigrbox\",             fc=color,             ec=\"black\",             lw=0.5,             label=seg.name.replace(\"chr\", \"\"),             text_kws=dict(rotation=0, size=8, color=\"white\", vpos=\"center\", hpos=\"center\"),         )  gv.add_link((\"human\", \"chr1\", 0, 100000000), (\"chimp\", \"chr1\", 0, 100000000)) gv.add_link((\"human\", \"chr2\", 0, 120000000), (\"chimp\", \"chr2A\", 0, 108022953), color=\"lime\", curve=True) gv.add_link((\"human\", \"chr2\", 120000000, 242193529), (\"chimp\", \"chr2B\", 0, 128755405), color=\"lime\", curve=True)  fig = gv.plotfig() In\u00a0[11]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\n\ngbk_files = load_example_genbank_dataset(\"yersinia_phage\")\ngbk = Genbank(gbk_files[0])\n\ngv = GenomeViz(fig_track_height=0.7)\ngv.set_scale_bar(ymargin=0.5)\n\ntrack = gv.add_feature_track(gbk.name, gbk.genome_length)\ntrack.add_sublabel()\n\n# Plot genbank features\nfeatures = gbk.extract_features()\ntrack.add_features(features, lw=0.5)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset  gbk_files = load_example_genbank_dataset(\"yersinia_phage\") gbk = Genbank(gbk_files[0])  gv = GenomeViz(fig_track_height=0.7) gv.set_scale_bar(ymargin=0.5)  track = gv.add_feature_track(gbk.name, gbk.genome_length) track.add_sublabel()  # Plot genbank features features = gbk.extract_features() track.add_features(features, lw=0.5)  fig = gv.plotfig() In\u00a0[\u00a0]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\n\ngbk_files = load_example_genbank_dataset(\"yersinia_phage\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(fig_track_height=0.7)\ngv.set_scale_xticks()\n\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.genome_length)\n\n    # Plot genbank features\n    features = gbk.extract_features()\n    for feature in features:\n        # Set user-defined feature color based on product name\n        product = str(feature.qualifiers.get(\"product\", [\"\"])[0])\n        color = \"lightgrey\" if product.startswith(\"hypothetical\") else \"limegreen\"\n        track.add_features(feature, plotstyle=\"bigarrow\", fc=color, lw=0.5)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset  gbk_files = load_example_genbank_dataset(\"yersinia_phage\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(fig_track_height=0.7) gv.set_scale_xticks()  for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.genome_length)      # Plot genbank features     features = gbk.extract_features()     for feature in features:         # Set user-defined feature color based on product name         product = str(feature.qualifiers.get(\"product\", [\"\"])[0])         color = \"lightgrey\" if product.startswith(\"hypothetical\") else \"limegreen\"         track.add_features(feature, plotstyle=\"bigarrow\", fc=color, lw=0.5)  fig = gv.plotfig() In\u00a0[13]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature\n\ngbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\")\ngbk = Genbank(gbk_files[-1])\n\ngv = GenomeViz(fig_track_height=0.5)\ngv.set_scale_bar(ymargin=0.5)\n\n# Set contigs as segments\ntrack = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), space=0.03)\n\nseqid2features = gbk.get_seqid2features(feature_type=None)\nfor segment in track.segments:\n    # Plot contig features per segment\n    features = seqid2features[segment.name]\n    for feature in features:\n        # Set user-defined feature color based on feature type &amp; pseudo tag\n        if feature.type == \"CDS\":\n            color = \"grey\" if is_pseudo_feature(feature) else \"blue\"\n            segment.add_features(feature, color=color)\n        elif feature.type == \"rRNA\":\n            segment.add_features(feature, color=\"lime\")\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature  gbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\") gbk = Genbank(gbk_files[-1])  gv = GenomeViz(fig_track_height=0.5) gv.set_scale_bar(ymargin=0.5)  # Set contigs as segments track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), space=0.03)  seqid2features = gbk.get_seqid2features(feature_type=None) for segment in track.segments:     # Plot contig features per segment     features = seqid2features[segment.name]     for feature in features:         # Set user-defined feature color based on feature type &amp; pseudo tag         if feature.type == \"CDS\":             color = \"grey\" if is_pseudo_feature(feature) else \"blue\"             segment.add_features(feature, color=color)         elif feature.type == \"rRNA\":             segment.add_features(feature, color=\"lime\")  fig = gv.plotfig() In\u00a0[14]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset, ColorCycler\nColorCycler.set_cmap(\"tab10\")\n\ngbk_files = load_example_genbank_dataset(\"saccharomyces\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(fig_track_height=0.7, feature_track_ratio=0.15)\ngv.set_scale_bar(ymargin=2.0)\n\nfor gbk in gbk_list:\n    color = ColorCycler()\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), space=0.01, label_kws=dict(color=color))\n    track.set_label(track.name.replace(\"_\", \"\\n\"))\n    for segment in track.segments:\n        segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset, ColorCycler ColorCycler.set_cmap(\"tab10\")  gbk_files = load_example_genbank_dataset(\"saccharomyces\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(fig_track_height=0.7, feature_track_ratio=0.15) gv.set_scale_bar(ymargin=2.0)  for gbk in gbk_list:     color = ColorCycler()     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), space=0.01, label_kws=dict(color=color))     track.set_label(track.name.replace(\"_\", \"\\n\"))     for segment in track.segments:         segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)  fig = gv.plotfig() In\u00a0[15]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Gff\nfrom pygenomeviz.utils import load_example_gff_file\n\ngff_file = load_example_gff_file(\"escherichia_coli.gff.gz\")\ngff = Gff(gff_file)\n\ngv = GenomeViz(fig_track_height=0.5)\ngv.set_scale_xticks(start=50000)\n\ntrack = gv.add_feature_track(name=\"E.coli\", segments=(50000, 80000))\ntrack.add_sublabel()\n\nsegment = track.get_segment()\nfor feature in gff.extract_features(\"CDS\", target_range=segment.range):\n    # Get gene name in GFF attributes column (e.g. `gene=araD;`)\n    gene_name = str(feature.qualifiers.get(\"gene\", [\"\"])[0])\n    # Set user-defined feature color based on gene name\n    if gene_name.startswith(\"ara\"):\n        color = \"blue\"\n    elif gene_name.startswith(\"thi\"):\n        color = \"lime\"\n    elif gene_name in (\"pdxA\", \"surA\", \"lptD\", \"djlA\", \"yabP\", \"yabQ\"):\n        color = \"tomato\"\n    else:\n        color = \"grey\"\n    segment.add_features(feature, plotstyle=\"bigarrow\", color=color, label_type=\"gene\")\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Gff from pygenomeviz.utils import load_example_gff_file  gff_file = load_example_gff_file(\"escherichia_coli.gff.gz\") gff = Gff(gff_file)  gv = GenomeViz(fig_track_height=0.5) gv.set_scale_xticks(start=50000)  track = gv.add_feature_track(name=\"E.coli\", segments=(50000, 80000)) track.add_sublabel()  segment = track.get_segment() for feature in gff.extract_features(\"CDS\", target_range=segment.range):     # Get gene name in GFF attributes column (e.g. `gene=araD;`)     gene_name = str(feature.qualifiers.get(\"gene\", [\"\"])[0])     # Set user-defined feature color based on gene name     if gene_name.startswith(\"ara\"):         color = \"blue\"     elif gene_name.startswith(\"thi\"):         color = \"lime\"     elif gene_name in (\"pdxA\", \"surA\", \"lptD\", \"djlA\", \"yabP\", \"yabQ\"):         color = \"tomato\"     else:         color = \"grey\"     segment.add_features(feature, plotstyle=\"bigarrow\", color=color, label_type=\"gene\")  fig = gv.plotfig() In\u00a0[16]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Gff\nfrom pygenomeviz.utils import load_example_gff_file\n\ngff_file = load_example_gff_file(\"escherichia_coli.gff.gz\")\ngff = Gff(gff_file)\n\ngv = GenomeViz()\ngv.set_scale_bar(ymargin=0.5)\n\ntarget_ranges = [(220000, 230000), (300000, 310000)]\ntrack = gv.add_feature_track(name=gff.name, segments=target_ranges)\ntrack.set_segment_sep()\n\nfor segment in track.segments:\n    segment.add_sublabel()\n    # Plot CDS features\n    cds_features = gff.extract_features(feature_type=\"CDS\", target_range=segment.range)\n    segment.add_features(cds_features, label_type=\"gene\", fc=\"skyblue\", lw=1.0, text_kws=dict(rotation=0, hpos=\"center\"))\n    # Plot rRNA features\n    rrna_features = gff.extract_features(feature_type=\"rRNA\", target_range=segment.range)\n    segment.add_features(rrna_features, label_type=\"product\", hatch=\"//\", fc=\"lime\", lw=1.0)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Gff from pygenomeviz.utils import load_example_gff_file  gff_file = load_example_gff_file(\"escherichia_coli.gff.gz\") gff = Gff(gff_file)  gv = GenomeViz() gv.set_scale_bar(ymargin=0.5)  target_ranges = [(220000, 230000), (300000, 310000)] track = gv.add_feature_track(name=gff.name, segments=target_ranges) track.set_segment_sep()  for segment in track.segments:     segment.add_sublabel()     # Plot CDS features     cds_features = gff.extract_features(feature_type=\"CDS\", target_range=segment.range)     segment.add_features(cds_features, label_type=\"gene\", fc=\"skyblue\", lw=1.0, text_kws=dict(rotation=0, hpos=\"center\"))     # Plot rRNA features     rrna_features = gff.extract_features(feature_type=\"rRNA\", target_range=segment.range)     segment.add_features(rrna_features, label_type=\"product\", hatch=\"//\", fc=\"lime\", lw=1.0)  fig = gv.plotfig() In\u00a0[17]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Gff\nfrom pygenomeviz.utils import load_example_gff_file, is_pseudo_feature\n\ngff_file = load_example_gff_file(\"mycoplasma_mycoides.gff\")\ngff = Gff(gff_file)\n\ngv = GenomeViz(fig_track_height=0.5, feature_track_ratio=0.5)\ngv.set_scale_xticks(labelsize=10)\n\n# Plot CDS, rRNA features for each contig to tracks\nfor seqid, size in gff.get_seqid2size().items():\n    track = gv.add_feature_track(seqid, size, labelsize=15)\n    track.add_sublabel(f\"{size:,} bp\", size=10, color=\"grey\")\n    cds_features = gff.get_seqid2features(feature_type=\"CDS\")[seqid]\n    # CDS: blue, CDS(pseudo): grey\n    for cds_feature in cds_features:\n        color = \"grey\" if is_pseudo_feature(cds_feature) else \"blue\"\n        track.add_features(cds_feature, color=color)\n    # rRNA: lime\n    rrna_features = gff.get_seqid2features(feature_type=\"rRNA\")[seqid]\n    track.add_features(rrna_features, color=\"lime\")\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Gff from pygenomeviz.utils import load_example_gff_file, is_pseudo_feature  gff_file = load_example_gff_file(\"mycoplasma_mycoides.gff\") gff = Gff(gff_file)  gv = GenomeViz(fig_track_height=0.5, feature_track_ratio=0.5) gv.set_scale_xticks(labelsize=10)  # Plot CDS, rRNA features for each contig to tracks for seqid, size in gff.get_seqid2size().items():     track = gv.add_feature_track(seqid, size, labelsize=15)     track.add_sublabel(f\"{size:,} bp\", size=10, color=\"grey\")     cds_features = gff.get_seqid2features(feature_type=\"CDS\")[seqid]     # CDS: blue, CDS(pseudo): grey     for cds_feature in cds_features:         color = \"grey\" if is_pseudo_feature(cds_feature) else \"blue\"         track.add_features(cds_feature, color=color)     # rRNA: lime     rrna_features = gff.get_seqid2features(feature_type=\"rRNA\")[seqid]     track.add_features(rrna_features, color=\"lime\")  fig = gv.plotfig() In\u00a0[18]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\nfrom pygenomeviz.align import Blast, AlignCoord\n\ngbk_files = load_example_genbank_dataset(\"yersinia_phage\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(track_align_type=\"center\")\ngv.set_scale_bar()\n\n# Plot CDS features\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)\n    for seqid, features in gbk.get_seqid2features(\"CDS\").items():\n        segment = track.get_segment(seqid)\n        segment.add_features(features, plotstyle=\"bigarrow\", fc=\"limegreen\", lw=0.5)\n\n# Run BLAST alignment &amp; filter by user-defined threshold\nalign_coords = Blast(gbk_list, seqtype=\"protein\").run()\nalign_coords = AlignCoord.filter(align_coords, length_thr=100, identity_thr=30)\n\n# Plot BLAST alignment links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"grey\", \"red\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset from pygenomeviz.align import Blast, AlignCoord  gbk_files = load_example_genbank_dataset(\"yersinia_phage\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(track_align_type=\"center\") gv.set_scale_bar()  # Plot CDS features for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)     for seqid, features in gbk.get_seqid2features(\"CDS\").items():         segment = track.get_segment(seqid)         segment.add_features(features, plotstyle=\"bigarrow\", fc=\"limegreen\", lw=0.5)  # Run BLAST alignment &amp; filter by user-defined threshold align_coords = Blast(gbk_list, seqtype=\"protein\").run() align_coords = AlignCoord.filter(align_coords, length_thr=100, identity_thr=30)  # Plot BLAST alignment links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"grey\", \"red\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)     gv.set_colorbar([color, inverted_color], vmin=min_ident)  fig = gv.plotfig() In\u00a0[19]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Fasta\nfrom pygenomeviz.utils import load_example_fasta_dataset, ColorCycler\nfrom pygenomeviz.align import Blast, AlignCoord\nColorCycler.set_cmap(\"tab10\")\n\nfasta_files = load_example_fasta_dataset(\"enterobacteria_phage\")\nfasta_list = list(map(Fasta, fasta_files))\n\ngv = GenomeViz(feature_track_ratio=0.10, fig_track_height=0.8, theme=\"dark\")\ngv.set_scale_xticks(ymargin=3)\n\n# Plot complete/contig genomes\nfor fasta in fasta_list:\n    color = ColorCycler()\n    track = gv.add_feature_track(fasta.name, fasta.get_seqid2size(), label_kws=dict(color=color))\n    for segment in track.segments:\n        segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)\n        segment.add_sublabel(ymargin=0.5)\n\n# Run BLAST alignment &amp; filter by user-defined threshold\nalign_coords = Blast(fasta_list).run()\nalign_coords = AlignCoord.filter(align_coords, length_thr=100, identity_thr=30)\n\n# Plot BLAST alignment links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"grey\", \"red\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, size=0.95)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident, bar_label=\"Identity\")\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Fasta from pygenomeviz.utils import load_example_fasta_dataset, ColorCycler from pygenomeviz.align import Blast, AlignCoord ColorCycler.set_cmap(\"tab10\")  fasta_files = load_example_fasta_dataset(\"enterobacteria_phage\") fasta_list = list(map(Fasta, fasta_files))  gv = GenomeViz(feature_track_ratio=0.10, fig_track_height=0.8, theme=\"dark\") gv.set_scale_xticks(ymargin=3)  # Plot complete/contig genomes for fasta in fasta_list:     color = ColorCycler()     track = gv.add_feature_track(fasta.name, fasta.get_seqid2size(), label_kws=dict(color=color))     for segment in track.segments:         segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)         segment.add_sublabel(ymargin=0.5)  # Run BLAST alignment &amp; filter by user-defined threshold align_coords = Blast(fasta_list).run() align_coords = AlignCoord.filter(align_coords, length_thr=100, identity_thr=30)  # Plot BLAST alignment links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"grey\", \"red\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, size=0.95)     gv.set_colorbar([color, inverted_color], vmin=min_ident, bar_label=\"Identity\")  fig = gv.plotfig() In\u00a0[20]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature\nfrom pygenomeviz.align import MUMmer\n\ngbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz()\ngv.set_scale_bar()\n\n# Plot CDS, rRNA features for each contig to tracks\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)\n    for seqid, features in gbk.get_seqid2features(None).items():\n        segment = track.get_segment(seqid)\n        for feature in features:\n            if feature.type == \"CDS\":\n                # CDS: blue, CDS(pseudo): grey\n                color = \"grey\" if is_pseudo_feature(feature) else \"blue\"\n                segment.add_features(feature, fc=color)\n            elif feature.type == \"rRNA\":\n                # rRNA: lime\n                segment.add_features(feature, fc=\"lime\")\n\n# Run MUMmer alignment\nalign_coords = MUMmer(gbk_list).run()\n\n# Plot MUMmer alignment links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"grey\", \"red\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature from pygenomeviz.align import MUMmer  gbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz() gv.set_scale_bar()  # Plot CDS, rRNA features for each contig to tracks for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)     for seqid, features in gbk.get_seqid2features(None).items():         segment = track.get_segment(seqid)         for feature in features:             if feature.type == \"CDS\":                 # CDS: blue, CDS(pseudo): grey                 color = \"grey\" if is_pseudo_feature(feature) else \"blue\"                 segment.add_features(feature, fc=color)             elif feature.type == \"rRNA\":                 # rRNA: lime                 segment.add_features(feature, fc=\"lime\")  # Run MUMmer alignment align_coords = MUMmer(gbk_list).run()  # Plot MUMmer alignment links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"grey\", \"red\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident)     gv.set_colorbar([color, inverted_color], vmin=min_ident)  fig = gv.plotfig() In\u00a0[21]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Fasta\nfrom pygenomeviz.utils import load_example_fasta_dataset, ColorCycler\nfrom pygenomeviz.align import MUMmer\nColorCycler.set_cmap(\"Set3\")\n\nfasta_files = load_example_fasta_dataset(\"mycoplasma_mycoides\")\nfasta_list = list(map(Fasta, fasta_files))\n\ngv = GenomeViz(feature_track_ratio=0.10, track_align_type=\"center\", theme=\"dark\")\ngv.set_scale_bar()\n\n# Plot complete/contig genomes\nfor fasta in fasta_list:\n    color = ColorCycler()\n    track = gv.add_feature_track(fasta.name, fasta.get_seqid2size(), label_kws=dict(color=color))\n    for segment in track.segments:\n        segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)\n\n# Run MUMmer alignment\nalign_coords = MUMmer(fasta_list).run()\n\n# Plot MUMmer alignment links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"grey\", \"red\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, curve=True)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Fasta from pygenomeviz.utils import load_example_fasta_dataset, ColorCycler from pygenomeviz.align import MUMmer ColorCycler.set_cmap(\"Set3\")  fasta_files = load_example_fasta_dataset(\"mycoplasma_mycoides\") fasta_list = list(map(Fasta, fasta_files))  gv = GenomeViz(feature_track_ratio=0.10, track_align_type=\"center\", theme=\"dark\") gv.set_scale_bar()  # Plot complete/contig genomes for fasta in fasta_list:     color = ColorCycler()     track = gv.add_feature_track(fasta.name, fasta.get_seqid2size(), label_kws=dict(color=color))     for segment in track.segments:         segment.add_feature(segment.start, segment.end, plotstyle=\"bigrbox\", fc=color, lw=0.5)  # Run MUMmer alignment align_coords = MUMmer(fasta_list).run()  # Plot MUMmer alignment links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"grey\", \"red\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, curve=True)     gv.set_colorbar([color, inverted_color], vmin=min_ident)  fig = gv.plotfig() In\u00a0[22]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\nfrom pygenomeviz.align import MMseqs\n\ngbk_files = load_example_genbank_dataset(\"enterobacteria_phage\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(fig_track_height=0.8, feature_track_ratio=0.4)\ngv.set_scale_xticks()\n\n# Plot CDS features\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)\n    for seqid, features in gbk.get_seqid2features(\"CDS\").items():\n        segment = track.get_segment(seqid)\n        segment.add_features(features, fc=\"skyblue\", lw=0.5)\n\n# Run MMseqs RBH search\nalign_coords = MMseqs(gbk_list).run()\n\n# Plot MMseqs RBH search links\nif len(align_coords) &gt; 0:\n    min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))\n    color, inverted_color = \"chocolate\", \"limegreen\"\n    for ac in align_coords:\n        gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, curve=True)\n    gv.set_colorbar([color, inverted_color], vmin=min_ident)\n\nfig = gv.plotfig()\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset from pygenomeviz.align import MMseqs  gbk_files = load_example_genbank_dataset(\"enterobacteria_phage\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(fig_track_height=0.8, feature_track_ratio=0.4) gv.set_scale_xticks()  # Plot CDS features for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)     for seqid, features in gbk.get_seqid2features(\"CDS\").items():         segment = track.get_segment(seqid)         segment.add_features(features, fc=\"skyblue\", lw=0.5)  # Run MMseqs RBH search align_coords = MMseqs(gbk_list).run()  # Plot MMseqs RBH search links if len(align_coords) &gt; 0:     min_ident = int(min([ac.identity for ac in align_coords if ac.identity]))     color, inverted_color = \"chocolate\", \"limegreen\"     for ac in align_coords:         gv.add_link(ac.query_link, ac.ref_link, color=color, inverted_color=inverted_color, v=ac.identity, vmin=min_ident, curve=True)     gv.set_colorbar([color, inverted_color], vmin=min_ident)  fig = gv.plotfig()"},{"location":"getting_started/#1-basic-content","title":"1. Basic Content\u00b6","text":""},{"location":"getting_started/#1-1-track","title":"1-1. Track\u00b6","text":""},{"location":"getting_started/#1-2-features","title":"1-2. Features\u00b6","text":""},{"location":"getting_started/#1-3-styled-features","title":"1-3. Styled Features\u00b6","text":""},{"location":"getting_started/#1-4-segments","title":"1-4. Segments\u00b6","text":""},{"location":"getting_started/#1-6-exon-features","title":"1-6. Exon Features\u00b6","text":""},{"location":"getting_started/#1-7-tracks","title":"1-7. Tracks\u00b6","text":""},{"location":"getting_started/#1-8-tracks-links","title":"1-8. Tracks &amp; Links\u00b6","text":""},{"location":"getting_started/#1-9-chromosomes","title":"1-9. Chromosomes\u00b6","text":""},{"location":"getting_started/#2-intermediate-content","title":"2. Intermediate Content\u00b6","text":"<p>pyGenomeViz supports genomic feature plots of Genbank and GFF files.</p>"},{"location":"getting_started/#2-1-genbank","title":"2-1. Genbank\u00b6","text":""},{"location":"getting_started/#2-1-1-features","title":"2-1-1. Features\u00b6","text":""},{"location":"getting_started/#2-1-2-tracks","title":"2-1-2. Tracks\u00b6","text":""},{"location":"getting_started/#2-1-3-contigs-per-segment","title":"2-1-3. Contigs per Segment\u00b6","text":""},{"location":"getting_started/#2-1-4-chromosomes","title":"2-1-4. Chromosomes\u00b6","text":""},{"location":"getting_started/#2-2-gff","title":"2-2. GFF\u00b6","text":""},{"location":"getting_started/#2-2-1-features","title":"2-2-1. Features\u00b6","text":""},{"location":"getting_started/#2-2-2-features-in-segments","title":"2-2-2. Features in Segments\u00b6","text":""},{"location":"getting_started/#2-2-3-contigs-per-track","title":"2-2-3. Contigs per Track\u00b6","text":""},{"location":"getting_started/#3-advanced-content","title":"3. Advanced Content\u00b6","text":"<p>pyGenomeViz supports aligning genomes between Genbank/Fasta files and plotting the alignment result links. Users can select BLAST, MUMmer, and MMseqs as aligner tools.</p>"},{"location":"getting_started/#3-1-blast-comparison","title":"3-1. BLAST Comparison\u00b6","text":""},{"location":"getting_started/#3-1-1-genbank","title":"3-1-1. Genbank\u00b6","text":""},{"location":"getting_started/#3-1-2-fasta","title":"3-1-2. Fasta\u00b6","text":""},{"location":"getting_started/#3-2-mummer-comparison","title":"3-2. MUMmer Comparison\u00b6","text":""},{"location":"getting_started/#3-2-1-genbank","title":"3-2-1. Genbank\u00b6","text":""},{"location":"getting_started/#3-2-2-fasta","title":"3-2-2. Fasta\u00b6","text":""},{"location":"getting_started/#3-3-mmseqs-comparison","title":"3-3. MMseqs Comparison\u00b6","text":""},{"location":"getting_started/#3-3-1-genbank","title":"3-3-1. Genbank\u00b6","text":""},{"location":"plot_tips/","title":"Plot Tips","text":"In\u00a0[1]: Copied! <pre># !pip install pygenomeviz\n</pre> # !pip install pygenomeviz In\u00a0[2]: Copied! <pre>from pygenomeviz import GenomeViz\nimport numpy as np\nnp.random.seed(0)\n\ngenome_list = [\n    dict(name=\"genome 01\", size=1000, features=((150, 300, 1), (500, 700, -1), (750, 950, 1))),\n    dict(name=\"genome 02\", size=1300, features=((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))),\n    dict(name=\"genome 03\", size=1200, features=((150, 300, 1), (350, 450, -1), (500, 700, -1), (700, 900, -1))),\n]\n\ngv = GenomeViz(fig_track_height=0.7, feature_track_ratio=0.5, track_align_type=\"center\")\ngv.set_scale_bar()\n\nfor genome in genome_list:\n    name, size, features = genome[\"name\"], genome[\"size\"], genome[\"features\"]\n    track = gv.add_feature_track(name, size)\n    track.add_subtrack(ylim=(0, 100)) # Add subtrack\n    for idx, feature in enumerate(features, 1):\n        start, end, strand = feature\n        track.add_feature(start, end, strand, plotstyle=\"bigarrow\", lw=1)\n\nfig = gv.plotfig()\n\n# Plot user-defined graph to subtrack axes\nfor track in gv.feature_tracks:\n    subtrack = track.get_subtrack()\n    for segment in track.segments:\n        # Plot y = (50 - 100) random values to subtrack\n        # Tranform segment-level x coordinate to track-level coordinate\n        x = np.arange(segment.start, segment.end, 10)\n        x = segment.transform_coord(x)\n        y = np.random.randint(50, 100, len(x))\n        subtrack.ax.fill_between(x, y, color=\"grey\")\n\n# fig.savefig(\"result.png\")\n</pre> from pygenomeviz import GenomeViz import numpy as np np.random.seed(0)  genome_list = [     dict(name=\"genome 01\", size=1000, features=((150, 300, 1), (500, 700, -1), (750, 950, 1))),     dict(name=\"genome 02\", size=1300, features=((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))),     dict(name=\"genome 03\", size=1200, features=((150, 300, 1), (350, 450, -1), (500, 700, -1), (700, 900, -1))), ]  gv = GenomeViz(fig_track_height=0.7, feature_track_ratio=0.5, track_align_type=\"center\") gv.set_scale_bar()  for genome in genome_list:     name, size, features = genome[\"name\"], genome[\"size\"], genome[\"features\"]     track = gv.add_feature_track(name, size)     track.add_subtrack(ylim=(0, 100)) # Add subtrack     for idx, feature in enumerate(features, 1):         start, end, strand = feature         track.add_feature(start, end, strand, plotstyle=\"bigarrow\", lw=1)  fig = gv.plotfig()  # Plot user-defined graph to subtrack axes for track in gv.feature_tracks:     subtrack = track.get_subtrack()     for segment in track.segments:         # Plot y = (50 - 100) random values to subtrack         # Tranform segment-level x coordinate to track-level coordinate         x = np.arange(segment.start, segment.end, 10)         x = segment.transform_coord(x)         y = np.random.randint(50, 100, len(x))         subtrack.ax.fill_between(x, y, color=\"grey\")  # fig.savefig(\"result.png\") In\u00a0[3]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature\n\ngbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(fig_track_height=0.5, feature_track_ratio=0.7)\ngv.set_scale_bar()\n\n# Plot CDS, rRNA features for each contig to tracks\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)\n    # Add two subtracks\n    track.add_subtrack(name=\"GCcontent\", ylim=(0, 100))\n    track.add_subtrack(name=\"GCskew\", ylim=(-1, 1))\n    for seqid, features in gbk.get_seqid2features(None).items():\n        segment = track.get_segment(seqid)\n        for feature in features:\n            if feature.type == \"CDS\":\n                color = \"grey\" if is_pseudo_feature(feature) else \"blue\"\n                segment.add_features(feature, fc=color)\n            elif feature.type == \"rRNA\":\n                segment.add_features(feature, fc=\"lime\")\n\nfig = gv.plotfig()\n\n# Plot GC content &amp; GC skew graph to subtrack axes\nfor track, gbk in zip(gv.feature_tracks, gbk_list):\n    gc_content_subtrack = track.get_subtrack(\"GCcontent\")\n    gc_skew_subtrack = track.get_subtrack(\"GCskew\")\n    for segment in track.segments:\n        seq = gbk.get_seqid2seq()[segment.name]\n        # Plot GC content\n        x, gc_content = gbk.calc_gc_content(window_size=1000, step_size=500, seq=seq)\n        x = segment.transform_coord(x)\n        gc_content_subtrack.ax.fill_between(x, gc_content, color=\"grey\")\n        # Plot GC skew\n        x, gc_skew = gbk.calc_gc_skew(window_size=1000, step_size=500, seq=seq)\n        x = segment.transform_coord(x)\n        gc_skew_subtrack.ax.fill_between(x, gc_skew, color=\"pink\")\n\n# fig.savefig(\"result.png\")\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature  gbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(fig_track_height=0.5, feature_track_ratio=0.7) gv.set_scale_bar()  # Plot CDS, rRNA features for each contig to tracks for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)     # Add two subtracks     track.add_subtrack(name=\"GCcontent\", ylim=(0, 100))     track.add_subtrack(name=\"GCskew\", ylim=(-1, 1))     for seqid, features in gbk.get_seqid2features(None).items():         segment = track.get_segment(seqid)         for feature in features:             if feature.type == \"CDS\":                 color = \"grey\" if is_pseudo_feature(feature) else \"blue\"                 segment.add_features(feature, fc=color)             elif feature.type == \"rRNA\":                 segment.add_features(feature, fc=\"lime\")  fig = gv.plotfig()  # Plot GC content &amp; GC skew graph to subtrack axes for track, gbk in zip(gv.feature_tracks, gbk_list):     gc_content_subtrack = track.get_subtrack(\"GCcontent\")     gc_skew_subtrack = track.get_subtrack(\"GCskew\")     for segment in track.segments:         seq = gbk.get_seqid2seq()[segment.name]         # Plot GC content         x, gc_content = gbk.calc_gc_content(window_size=1000, step_size=500, seq=seq)         x = segment.transform_coord(x)         gc_content_subtrack.ax.fill_between(x, gc_content, color=\"grey\")         # Plot GC skew         x, gc_skew = gbk.calc_gc_skew(window_size=1000, step_size=500, seq=seq)         x = segment.transform_coord(x)         gc_skew_subtrack.ax.fill_between(x, gc_skew, color=\"pink\")  # fig.savefig(\"result.png\") In\u00a0[4]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\n\ngbk_files = load_example_genbank_dataset(\"yersinia_phage\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(fig_track_height=0.7, feature_track_ratio=0.5, track_align_type=\"center\")\ngv.set_scale_bar()\n\n# Plot CDS features\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size())\n    for seqid, features in gbk.get_seqid2features(\"CDS\").items():\n        segment = track.get_segment(seqid)\n        segment.add_features(features, fc=\"limegreen\", lw=0.5)\n\nfig = gv.plotfig()\n\n# Plot annotations on top track\ntop_track = gv.feature_tracks[0]\nannotate_regions = ((0, 3000), (8000, 12000), (19000, 23000))\nfor idx, annotate_region in enumerate(annotate_regions, 1):\n    start, end = annotate_region\n    start, end = top_track.transform_coord(start), top_track.transform_coord(end)\n    # Plot horizontal line (track ylim=(-1.0, 1.0))\n    top_track.ax.hlines(y=1.3, xmin=start, xmax=end, color=\"red\", lw=1, clip_on=False)\n    # Plot text\n    text_x, text_y = (start + end) / 2, 1.5\n    top_track.ax.text(text_x, text_y, s=f\"region{idx}\", size=15, va=\"bottom\", ha=\"center\")\n    # Plot fill box\n    x, y = (start, end, end, start), (-1, -1, 1, 1)\n    top_track.ax.fill(x, y, fc=\"skyblue\", alpha=0.5, zorder=-1)\n\n# fig.savefig(\"result.png\")\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset  gbk_files = load_example_genbank_dataset(\"yersinia_phage\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(fig_track_height=0.7, feature_track_ratio=0.5, track_align_type=\"center\") gv.set_scale_bar()  # Plot CDS features for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size())     for seqid, features in gbk.get_seqid2features(\"CDS\").items():         segment = track.get_segment(seqid)         segment.add_features(features, fc=\"limegreen\", lw=0.5)  fig = gv.plotfig()  # Plot annotations on top track top_track = gv.feature_tracks[0] annotate_regions = ((0, 3000), (8000, 12000), (19000, 23000)) for idx, annotate_region in enumerate(annotate_regions, 1):     start, end = annotate_region     start, end = top_track.transform_coord(start), top_track.transform_coord(end)     # Plot horizontal line (track ylim=(-1.0, 1.0))     top_track.ax.hlines(y=1.3, xmin=start, xmax=end, color=\"red\", lw=1, clip_on=False)     # Plot text     text_x, text_y = (start + end) / 2, 1.5     top_track.ax.text(text_x, text_y, s=f\"region{idx}\", size=15, va=\"bottom\", ha=\"center\")     # Plot fill box     x, y = (start, end, end, start), (-1, -1, 1, 1)     top_track.ax.fill(x, y, fc=\"skyblue\", alpha=0.5, zorder=-1)  # fig.savefig(\"result.png\") In\u00a0[5]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Gff\nfrom pygenomeviz.utils import load_example_gff_file\nfrom matplotlib.lines import Line2D\n\ngff_file = load_example_gff_file(\"escherichia_coli.gff.gz\")\ngff = Gff(gff_file)\n\ngv = GenomeViz(fig_track_height=0.5)\ngv.set_scale_xticks(start=50000)\n\ntrack = gv.add_feature_track(name=\"E.coli\", segments=(50000, 80000))\ntrack.add_sublabel()\n\nsegment = track.get_segment()\nfor feature in gff.extract_features(\"CDS\", target_range=segment.range):\n    # Get gene name in GFF attributes column (e.g. `gene=araD;`)\n    gene_name = str(feature.qualifiers.get(\"gene\", [\"\"])[0])\n    # Set user-defined feature color based on gene name\n    if gene_name.startswith(\"ara\"):\n        color = \"blue\"\n    elif gene_name.startswith(\"thi\"):\n        color = \"lime\"\n    elif gene_name in (\"pdxA\", \"surA\", \"lptD\", \"djlA\", \"yabP\", \"yabQ\"):\n        color = \"tomato\"\n    else:\n        color = \"grey\"\n    segment.add_features(feature, plotstyle=\"bigarrow\", color=color, label_type=\"gene\")\n\nfig = gv.plotfig()\n\n# Plot legend for groups\n_ = fig.legend(\n    handles=[\n        Line2D([], [], marker=\"&gt;\", color=\"tomato\", label=\"Group1\", ms=12, ls=\"none\"),\n        Line2D([], [], marker=\"&gt;\", color=\"blue\", label=\"Group2\", ms=12, ls=\"none\"),\n        Line2D([], [], marker=\"&gt;\", color=\"lime\", label=\"Group3\", ms=12, ls=\"none\"),\n        Line2D([], [], marker=\"&gt;\", color=\"grey\", label=\"Others\", ms=12, ls=\"none\"),\n    ],\n    fontsize=12,\n    title=\"Groups\",\n    title_fontsize=12,\n    loc=\"center left\",\n    bbox_to_anchor=(1.02, 0.5),\n    handlelength=1.0,\n)\n# fig.savefig(\"result.png\")\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Gff from pygenomeviz.utils import load_example_gff_file from matplotlib.lines import Line2D  gff_file = load_example_gff_file(\"escherichia_coli.gff.gz\") gff = Gff(gff_file)  gv = GenomeViz(fig_track_height=0.5) gv.set_scale_xticks(start=50000)  track = gv.add_feature_track(name=\"E.coli\", segments=(50000, 80000)) track.add_sublabel()  segment = track.get_segment() for feature in gff.extract_features(\"CDS\", target_range=segment.range):     # Get gene name in GFF attributes column (e.g. `gene=araD;`)     gene_name = str(feature.qualifiers.get(\"gene\", [\"\"])[0])     # Set user-defined feature color based on gene name     if gene_name.startswith(\"ara\"):         color = \"blue\"     elif gene_name.startswith(\"thi\"):         color = \"lime\"     elif gene_name in (\"pdxA\", \"surA\", \"lptD\", \"djlA\", \"yabP\", \"yabQ\"):         color = \"tomato\"     else:         color = \"grey\"     segment.add_features(feature, plotstyle=\"bigarrow\", color=color, label_type=\"gene\")  fig = gv.plotfig()  # Plot legend for groups _ = fig.legend(     handles=[         Line2D([], [], marker=\"&gt;\", color=\"tomato\", label=\"Group1\", ms=12, ls=\"none\"),         Line2D([], [], marker=\"&gt;\", color=\"blue\", label=\"Group2\", ms=12, ls=\"none\"),         Line2D([], [], marker=\"&gt;\", color=\"lime\", label=\"Group3\", ms=12, ls=\"none\"),         Line2D([], [], marker=\"&gt;\", color=\"grey\", label=\"Others\", ms=12, ls=\"none\"),     ],     fontsize=12,     title=\"Groups\",     title_fontsize=12,     loc=\"center left\",     bbox_to_anchor=(1.02, 0.5),     handlelength=1.0, ) # fig.savefig(\"result.png\") In\u00a0[6]: Copied! <pre>from pygenomeviz import GenomeViz\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Patch\n\ngbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\")\ngbk_list = list(map(Genbank, gbk_files))\n\ngv = GenomeViz(fig_track_height=0.5, feature_track_ratio=0.7)\ngv.set_scale_bar()\n\n# Plot CDS, rRNA features for each contig to tracks\nfor gbk in gbk_list:\n    track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)\n    # Add two subtracks\n    track.add_subtrack(name=\"GCcontent\", ylim=(0, 100))\n    track.add_subtrack(name=\"GCskew\", ylim=(-1, 1))\n    for seqid, features in gbk.get_seqid2features(None).items():\n        segment = track.get_segment(seqid)\n        for feature in features:\n            if feature.type == \"CDS\":\n                color = \"grey\" if is_pseudo_feature(feature) else \"blue\"\n                segment.add_features(feature, fc=color)\n            elif feature.type == \"rRNA\":\n                segment.add_features(feature, fc=\"lime\")\n\nfig = gv.plotfig()\n\n# Plot GC content &amp; GC skew graph to subtrack axes\nfor track, gbk in zip(gv.feature_tracks, gbk_list):\n    gc_content_subtrack = track.get_subtrack(\"GCcontent\")\n    gc_skew_subtrack = track.get_subtrack(\"GCskew\")\n    for segment in track.segments:\n        seq = gbk.get_seqid2seq()[segment.name]\n        # Plot GCcontent\n        x, gc_content = gbk.calc_gc_content(window_size=1000, step_size=500, seq=seq)\n        x = segment.transform_coord(x)\n        gc_content_subtrack.ax.fill_between(x, gc_content, color=\"grey\")\n        # Plot GCskew\n        x, gc_skew = gbk.calc_gc_skew(window_size=1000, step_size=500, seq=seq)\n        x = segment.transform_coord(x)\n        gc_skew_subtrack.ax.fill_between(x, gc_skew, color=\"pink\")\n\n# Plot legend for feature types\n_ = fig.legend(\n    handles=[\n        Line2D([], [], marker=\"&gt;\", color=\"blue\", label=\"CDS\", ms=12, ls=\"none\"),\n        Line2D([], [], marker=\"&gt;\", color=\"grey\", label=\"Pseudogene\", ms=12, ls=\"none\"),\n        Line2D([], [], marker=\"&gt;\", color=\"lime\", label=\"rRNA\", ms=12, ls=\"none\"),\n    ],\n    fontsize=12,\n    title=\"Feature Types\",\n    title_fontsize=12,\n    bbox_to_anchor=(0.9, 1.0),\n    loc=\"upper left\",\n    handlelength=1.0,\n)\n\n# Plot legend for subtrack graphs\n_ = fig.legend(\n    handles=[\n        Patch(color=\"grey\", label=\"GC content\"),\n        Patch(color=\"pink\", label=\"GC skew\"),\n    ],\n    fontsize=12,\n    title=\"Graphs\",\n    title_fontsize=12,\n    bbox_to_anchor=(0.9, 0.8),\n    loc=\"upper left\",\n    handlelength=1.0,\n)\n# fig.savefig(\"result.png\")\n</pre> from pygenomeviz import GenomeViz from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset, is_pseudo_feature from matplotlib.lines import Line2D from matplotlib.patches import Patch  gbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\") gbk_list = list(map(Genbank, gbk_files))  gv = GenomeViz(fig_track_height=0.5, feature_track_ratio=0.7) gv.set_scale_bar()  # Plot CDS, rRNA features for each contig to tracks for gbk in gbk_list:     track = gv.add_feature_track(gbk.name, gbk.get_seqid2size(), align_label=False)     # Add two subtracks     track.add_subtrack(name=\"GCcontent\", ylim=(0, 100))     track.add_subtrack(name=\"GCskew\", ylim=(-1, 1))     for seqid, features in gbk.get_seqid2features(None).items():         segment = track.get_segment(seqid)         for feature in features:             if feature.type == \"CDS\":                 color = \"grey\" if is_pseudo_feature(feature) else \"blue\"                 segment.add_features(feature, fc=color)             elif feature.type == \"rRNA\":                 segment.add_features(feature, fc=\"lime\")  fig = gv.plotfig()  # Plot GC content &amp; GC skew graph to subtrack axes for track, gbk in zip(gv.feature_tracks, gbk_list):     gc_content_subtrack = track.get_subtrack(\"GCcontent\")     gc_skew_subtrack = track.get_subtrack(\"GCskew\")     for segment in track.segments:         seq = gbk.get_seqid2seq()[segment.name]         # Plot GCcontent         x, gc_content = gbk.calc_gc_content(window_size=1000, step_size=500, seq=seq)         x = segment.transform_coord(x)         gc_content_subtrack.ax.fill_between(x, gc_content, color=\"grey\")         # Plot GCskew         x, gc_skew = gbk.calc_gc_skew(window_size=1000, step_size=500, seq=seq)         x = segment.transform_coord(x)         gc_skew_subtrack.ax.fill_between(x, gc_skew, color=\"pink\")  # Plot legend for feature types _ = fig.legend(     handles=[         Line2D([], [], marker=\"&gt;\", color=\"blue\", label=\"CDS\", ms=12, ls=\"none\"),         Line2D([], [], marker=\"&gt;\", color=\"grey\", label=\"Pseudogene\", ms=12, ls=\"none\"),         Line2D([], [], marker=\"&gt;\", color=\"lime\", label=\"rRNA\", ms=12, ls=\"none\"),     ],     fontsize=12,     title=\"Feature Types\",     title_fontsize=12,     bbox_to_anchor=(0.9, 1.0),     loc=\"upper left\",     handlelength=1.0, )  # Plot legend for subtrack graphs _ = fig.legend(     handles=[         Patch(color=\"grey\", label=\"GC content\"),         Patch(color=\"pink\", label=\"GC skew\"),     ],     fontsize=12,     title=\"Graphs\",     title_fontsize=12,     bbox_to_anchor=(0.9, 0.8),     loc=\"upper left\",     handlelength=1.0, ) # fig.savefig(\"result.png\")"},{"location":"plot_tips/#subtrack","title":"Subtrack\u00b6","text":"<p>Users can add subtracks to a FeatureTrack and plot user-defined graphs to matplotlib Axes of the subtracks (Option for users familiar with matplotlib)</p>"},{"location":"plot_tips/#annotation","title":"Annotation\u00b6","text":"<p>Users can plot user-defined annotations to matplotlib Axes in FeatureTrack (Option for users familiar with matplotlib).</p>"},{"location":"plot_tips/#legend","title":"Legend\u00b6","text":"<p>Example of manual legend plotting code using <code>Figure.legend()</code> method. See Legend guide for more details.</p>"},{"location":"api-docs/genbank/","title":"Genbank Class","text":""},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank","title":"Genbank","text":"<pre><code>Genbank(\n    gbk_source: str | Path | StringIO | TextIOWrapper | list[SeqRecord],\n    *,\n    name: str | None = None\n)\n</code></pre> <p>Genbank Parser Class</p> PARAMETER DESCRIPTION <code>gbk_source</code> <p>Genbank file or source (<code>*.gz</code>, <code>*.bz2</code>, <code>*.zip</code> compressed file can be readable)</p> <p> TYPE: <code>str | Path | StringIO | TextIOWrapper | list[SeqRecord]</code> </p> <code>name</code> <p>name (If None, <code>file name</code> or <code>record name</code> is set)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Name</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.records","title":"records  <code>property</code>","text":"<pre><code>records: list[SeqRecord]\n</code></pre> <p>Genbank records</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.genome_seq","title":"genome_seq  <code>property</code>","text":"<pre><code>genome_seq: str\n</code></pre> <p>Genome sequence (only first record)</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.genome_length","title":"genome_length  <code>property</code>","text":"<pre><code>genome_length: int\n</code></pre> <p>Genome length (only first record)</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.full_genome_seq","title":"full_genome_seq  <code>property</code>","text":"<pre><code>full_genome_seq: str\n</code></pre> <p>Full genome sequence (concatenate all records)</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.full_genome_length","title":"full_genome_length  <code>property</code>","text":"<pre><code>full_genome_length: int\n</code></pre> <p>Full genome length (concatenate all records)</p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.calc_genome_gc_content","title":"calc_genome_gc_content","text":"<pre><code>calc_genome_gc_content(seq: str | None = None) -&gt; float\n</code></pre> <p>Calculate genome GC content</p> PARAMETER DESCRIPTION <code>seq</code> <p>Sequence for GC content calculation (Default: <code>self.genome_seq</code>)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>gc_content</code> <p>GC content</p> <p> TYPE: <code>float</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.calc_gc_skew","title":"calc_gc_skew","text":"<pre><code>calc_gc_skew(\n    window_size: int | None = None,\n    step_size: int | None = None,\n    *,\n    seq: str | None = None\n) -&gt; tuple[NDArray[np.int64], NDArray[np.float64]]\n</code></pre> <p>Calculate GC skew in sliding window</p> PARAMETER DESCRIPTION <code>window_size</code> <p>Window size (Default: <code>genome_size / 500</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>step_size</code> <p>Step size (Default: <code>genome_size / 1000</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>seq</code> <p>Sequence for GCskew calculation (Default: <code>self.genome_seq</code>)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>pos_list</code> <p>Position list</p> <p> TYPE: <code>NDArray[int64]</code> </p> <code>gc_skew_list</code> <p>GC skew list</p> <p> TYPE: <code>NDArray[float64]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.calc_gc_content","title":"calc_gc_content","text":"<pre><code>calc_gc_content(\n    window_size: int | None = None,\n    step_size: int | None = None,\n    *,\n    seq: str | None = None\n) -&gt; tuple[NDArray[np.int64], NDArray[np.float64]]\n</code></pre> <p>Calculate GC content in sliding window</p> PARAMETER DESCRIPTION <code>window_size</code> <p>Window size (Default: <code>genome_size / 500</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>step_size</code> <p>Step size (Default: <code>genome_size / 1000</code>)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>seq</code> <p>Sequence for GC content calculation (Default: <code>self.genome_seq</code>)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>pos_list</code> <p>Position list</p> <p> TYPE: <code>NDArray[int64]</code> </p> <code>gc_content_list</code> <p>GC content list</p> <p> TYPE: <code>NDArray[float64]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.get_seqid2seq","title":"get_seqid2seq","text":"<pre><code>get_seqid2seq() -&gt; dict[str, str]\n</code></pre> <p>Get seqid &amp; complete/contig/scaffold genome sequence dict</p> RETURNS DESCRIPTION <code>seqid2seq</code> <p>seqid &amp; genome sequence dict</p> <p> TYPE: <code>dict[str, str]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.get_seqid2size","title":"get_seqid2size","text":"<pre><code>get_seqid2size() -&gt; dict[str, int]\n</code></pre> <p>Get seqid &amp; complete/contig/scaffold genome size dict</p> RETURNS DESCRIPTION <code>seqid2size</code> <p>seqid &amp; genome size dict</p> <p> TYPE: <code>dict[str, int]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.get_seqid2features","title":"get_seqid2features","text":"<pre><code>get_seqid2features(\n    feature_type: str | list[str] | None = \"CDS\", target_strand: int | None = None\n) -&gt; dict[str, list[SeqFeature]]\n</code></pre> <p>Get seqid &amp; features in target seqid genome dict</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Feature type (<code>CDS</code>, <code>gene</code>, <code>mRNA</code>, etc...) If None, extract regardless of feature type.</p> <p> TYPE: <code>str | list[str] | None</code> DEFAULT: <code>'CDS'</code> </p> <code>target_strand</code> <p>Extract target strand. If None, extract regardless of strand.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>seqid2features</code> <p>seqid &amp; features dict</p> <p> TYPE: <code>dict[str, list[SeqFeature]]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.extract_features","title":"extract_features","text":"<pre><code>extract_features(\n    feature_type: str | list[str] | None = \"CDS\",\n    *,\n    target_strand: int | None = None,\n    target_range: tuple[int, int] | None = None\n) -&gt; list[SeqFeature]\n</code></pre> <p>Extract features (only first record)</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Feature type (<code>CDS</code>, <code>gene</code>, <code>mRNA</code>, etc...) If None, extract regardless of feature type.</p> <p> TYPE: <code>str | list[str] | None</code> DEFAULT: <code>'CDS'</code> </p> <code>target_strand</code> <p>Extract target strand. If None, extract regardless of strand.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>target_range</code> <p>Extract target range. If None, extract regardless of range.</p> <p> TYPE: <code>tuple[int, int] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>features</code> <p>Extracted features</p> <p> TYPE: <code>list[SeqFeature]</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.write_cds_fasta","title":"write_cds_fasta","text":"<pre><code>write_cds_fasta(outfile: str | Path) -&gt; None\n</code></pre> <p>Write CDS fasta file</p> PARAMETER DESCRIPTION <code>outfile</code> <p>Output CDS fasta file</p> <p> TYPE: <code>str | Path</code> </p>"},{"location":"api-docs/genbank/#pygenomeviz.parser.genbank.Genbank.write_genome_fasta","title":"write_genome_fasta","text":"<pre><code>write_genome_fasta(outfile: str | Path) -&gt; None\n</code></pre> <p>Write genome fasta file</p> PARAMETER DESCRIPTION <code>outfile</code> <p>Output genome fasta file</p> <p> TYPE: <code>str | Path</code> </p>"},{"location":"api-docs/genomeviz/","title":"GenomeViz Class","text":""},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz","title":"GenomeViz","text":"<pre><code>GenomeViz(\n    *,\n    fig_width: float = 15,\n    fig_track_height: float = 1.0,\n    track_align_type: TrackAlignType = \"left\",\n    feature_track_ratio: float = 0.25,\n    link_track_ratio: float = 1.0,\n    theme: Theme = \"light\",\n    show_axis: bool = False\n)\n</code></pre> <p>Genome Visualization Class</p> PARAMETER DESCRIPTION <code>fig_width</code> <p>Figure width</p> <p> TYPE: <code>float</code> DEFAULT: <code>15</code> </p> <code>fig_track_height</code> <p>Figure height = <code>fig_track_height * track number</code></p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>track_align_type</code> <p>Figure track alignment type (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>TrackAlignType</code> DEFAULT: <code>'left'</code> </p> <code>feature_track_ratio</code> <p>Feature track size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.25</code> </p> <code>link_track_ratio</code> <p>Link track size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>theme</code> <p><code>light</code>: white background + black text, edge <code>dark</code>: black background + white text, edge</p> <p> TYPE: <code>Theme</code> DEFAULT: <code>'light'</code> </p> <code>show_axis</code> <p>Show axis for debug purpose</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.figsize","title":"figsize  <code>property</code>","text":"<pre><code>figsize: tuple[float, float]\n</code></pre> <p>Figure size (Width, Height)</p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.feature_tracks","title":"feature_tracks  <code>property</code>","text":"<pre><code>feature_tracks: list[FeatureTrack]\n</code></pre> <p>Feature tracks</p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.link_tracks","title":"link_tracks  <code>property</code>","text":"<pre><code>link_tracks: list[LinkTrack]\n</code></pre> <p>Link tracks</p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.get_tracks","title":"get_tracks","text":"<pre><code>get_tracks(*, subtrack: bool = True) -&gt; list[Track]\n</code></pre> <p>Get tracks</p> PARAMETER DESCRIPTION <code>subtrack</code> <p>If True, include subtracks in FeatureTrack</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>tracks</code> <p>Tracks [<code>FeatureTrack</code>|<code>FeatureSubTrack</code>|<code>LinkTrack</code>]</p> <p> TYPE: <code>list[Track]</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.add_feature_track","title":"add_feature_track","text":"<pre><code>add_feature_track(\n    name: str,\n    segments: (\n        int\n        | tuple[int, int]\n        | Sequence[int | tuple[int, int]]\n        | Mapping[str, int | tuple[int, int]]\n    ),\n    *,\n    space: float | list[float] = 0.02,\n    offset: int | TrackAlignType | None = None,\n    labelsize: float = 20,\n    labelmargin: float = 0.01,\n    align_label: bool = True,\n    label_kws: dict[str, Any] | None = None,\n    line_kws: dict[str, Any] | None = None\n) -&gt; FeatureTrack\n</code></pre> <p>Add feature track</p> <p>Add feature track, and also add link track between feature tracks if other feature tracks already exist.</p> PARAMETER DESCRIPTION <code>name</code> <p>Track name</p> <p> TYPE: <code>str</code> </p> <code>segments</code> <p>Track segments definition. Segment sizes or ranges can be specified.</p> <p> TYPE: <code>int | tuple[int, int] | Sequence[int | tuple[int, int]] | Mapping[str, int | tuple[int, int]]</code> </p> <code>space</code> <p>Space ratio between segments. If <code>float</code>, all spaces are set to the same value. If <code>list[float]</code>, each space is set to the corresponding value (list size must be <code>len(segments) - 1</code>)</p> <p> TYPE: <code>float | list[float]</code> DEFAULT: <code>0.02</code> </p> <code>offset</code> <p>Offset int value or TrackAlignType (<code>left</code>|<code>center</code>|<code>right</code>) If None, offset is defined by GenomeViz <code>track_align_type</code> argument at initialization.</p> <p> TYPE: <code>int | TrackAlignType | None</code> DEFAULT: <code>None</code> </p> <code>labelsize</code> <p>Track label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>20</code> </p> <code>labelmargin</code> <p>Track label margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>align_label</code> <p>If True, align track label to the most left position. If False, set track label to first segment start position.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>label_kws</code> <p>Text properties (e.g. <code>dict(size=25, color=\"red\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>line_kws</code> <p>Axes.plot properties (e.g. <code>dict(color=\"grey\", lw=0.5, ls=\"--\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>feature_track</code> <p>Feature track</p> <p> TYPE: <code>FeatureTrack</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.add_link","title":"add_link","text":"<pre><code>add_link(\n    target1: tuple[str, int, int] | tuple[str, str | None, int, int],\n    target2: tuple[str, int, int] | tuple[str, str | None, int, int],\n    color: str = \"grey\",\n    inverted_color: str | None = None,\n    alpha: float = 0.8,\n    v: float | None = None,\n    vmin: float = 0,\n    vmax: float = 100,\n    size: float = 1.0,\n    curve: bool = False,\n    filter_length: int = 0,\n    ignore_outside_range: bool = False,\n    v_tooltip: float | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Add link patch to link track between adjacent feature tracks</p> PARAMETER DESCRIPTION <code>target1</code> <p>Target link1 <code>(track_name, start, end)</code> or <code>(track_name, target_segment, start, end)</code></p> <p> TYPE: <code>tuple[str, int, int] | tuple[str, int | str | None, int, int]</code> </p> <code>target2</code> <p>Target link2 <code>(track_name, start, end)</code> or <code>(track_name, target_segment, start, end)</code></p> <p> TYPE: <code>tuple[str, int, int] | tuple[str, int | str | None, int, int]</code> </p> <code>color</code> <p>Link color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'grey'</code> </p> <code>inverted_color</code> <p>Inverted link color. If None, <code>color</code> is set.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>alpha</code> <p>Color transparency</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.8</code> </p> <code>v</code> <p>Identity value for color interpolation. If None, no color interpolation is done.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>vmin</code> <p>Min value for color interpolation</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Max value for color interpolation</p> <p> TYPE: <code>float</code> DEFAULT: <code>100</code> </p> <code>size</code> <p>Link vertical size ratio for track</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>curve</code> <p>If True, bezier curve link is plotted</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filter_length</code> <p>If link length is shorter than <code>filter_length</code>, ignore it.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>ignore_outside_range</code> <p>If True and the link position is outside the range of the target track, ignore it without raising an error.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>v_tooltip</code> <p>Identity value for only tooltip display. If no color interpolation is required, use this option instead of <code>v</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>ec=\"black\", lw=0.5, hatch=\"//\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.set_scale_bar","title":"set_scale_bar","text":"<pre><code>set_scale_bar(\n    *,\n    ymargin: float = 1.0,\n    labelsize: float = 15,\n    scale_size_label: tuple[int, str] | None = None\n) -&gt; None\n</code></pre> <p>Set scale bar</p> PARAMETER DESCRIPTION <code>ymargin</code> <p>Scale bar y margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>labelsize</code> <p>Label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>15</code> </p> <code>scale_size_label</code> <p>Scale bar size &amp; label tuple (e.g. <code>(1000, \"1.0 kb\")</code>) If None, scale bar size &amp; label are automatically set.</p> <p> TYPE: <code>tuple[int, str] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.set_scale_xticks","title":"set_scale_xticks","text":"<pre><code>set_scale_xticks(\n    *,\n    ymargin: float = 1.0,\n    labelsize: float = 15,\n    start: int = 0,\n    unit: Unit | None = None\n) -&gt; None\n</code></pre> <p>Set scale xticks</p> PARAMETER DESCRIPTION <code>ymargin</code> <p>X ticks y margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>labelsize</code> <p>Label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>15</code> </p> <code>start</code> <p>X ticks start position</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>unit</code> <p>Display unit (<code>Gb</code>|<code>Mb</code>|<code>Kb</code>|<code>bp</code>)</p> <p> TYPE: <code>Unit | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.set_colorbar","title":"set_colorbar","text":"<pre><code>set_colorbar(\n    colors: list[str] | None = None,\n    *,\n    alpha: float = 0.8,\n    vmin: float = 0,\n    vmax: float = 100,\n    bar_height: float = 0.2,\n    bar_width: float = 0.01,\n    bar_left: float = 1.02,\n    bar_bottom: float = 0,\n    bar_label: str = \"\",\n    bar_labelsize: float = 15,\n    tick_labelsize: float = 10\n) -&gt; None\n</code></pre> <p>Set colorbar</p> PARAMETER DESCRIPTION <code>colors</code> <p>Colors for bar</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>alpha</code> <p>Color transparency</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.8</code> </p> <code>vmin</code> <p>Colorbar min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Colorbar max value</p> <p> TYPE: <code>float</code> DEFAULT: <code>100</code> </p> <code>bar_height</code> <p>Colorbar height ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>bar_width</code> <p>Colorbar width ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>bar_left</code> <p>Colorbar left position</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.02</code> </p> <code>bar_bottom</code> <p>Colorbar bottom position</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>bar_label</code> <p>Colorbar label</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>bar_labelsize</code> <p>Colorbar label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>15</code> </p> <code>tick_labelsize</code> <p>Colorbar tick label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.plotfig","title":"plotfig","text":"<pre><code>plotfig(*, dpi: int = 100, fast_render: bool = True) -&gt; Figure\n</code></pre> <p>Plot figure</p> PARAMETER DESCRIPTION <code>dpi</code> <p>DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>fast_render</code> <p>Enable fast rendering mode using PatchCollection. Set fast_render=True by default, and set it to False when used in the <code>savefig_html()</code> method. Fast rendering mode cannot generate tooltips for html display.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>fig</code> <p>Plot figure result</p> <p> TYPE: <code>Figure</code> </p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.savefig","title":"savefig","text":"<pre><code>savefig(savefile: str | Path, *, dpi: int = 100, pad_inches: float = 0.5) -&gt; None\n</code></pre> <p>Save figure to file</p> PARAMETER DESCRIPTION <code>savefile</code> <p>Save file</p> <p> TYPE: <code>str | Path</code> </p> <code>dpi</code> <p>DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>pad_inches</code> <p>Padding inches</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> Warnings <p>To plot a figure that settings a user-defined legend, subtracks, or annotations, call <code>fig.savefig()</code> instead of <code>gv.savefig()</code>.</p>"},{"location":"api-docs/genomeviz/#pygenomeviz.genomeviz.GenomeViz.savefig_html","title":"savefig_html","text":"<pre><code>savefig_html(\n    html_outfile: str | Path | StringIO | BytesIO, figure: Figure | None = None\n) -&gt; None\n</code></pre> <p>Save figure in html format</p> PARAMETER DESCRIPTION <code>html_outfile</code> <p>Output HTML file (*.html)</p> <p> TYPE: <code>str | Path | StringIO | BytesIO</code> </p> <code>figure</code> <p>Save HTML viewer file using user customized figure. Set to output figure including user-specified legend, subtracks, etc. Target figure must be generated by <code>gv.plotfig(fast_render=False)</code>.</p> <p> TYPE: <code>Figure | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/gff/","title":"Gff Class","text":""},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff","title":"Gff","text":"<pre><code>Gff(gff_file: str | Path, *, name: str | None = None, target_seqid: str | None = None)\n</code></pre> <p>GFF Parser Class</p> PARAMETER DESCRIPTION <code>gff_file</code> <p>GFF file (<code>*.gz</code>, <code>*.bz2</code>, <code>*.zip</code> compressed file can be readable)</p> <p> TYPE: <code>str | Path</code> </p> <code>name</code> <p>name (If None, <code>file name</code> is set)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>target_seqid</code> <p>Target seqid to be extracted. If None, only first seqid record is extracted.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Name</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.seq_region","title":"seq_region  <code>property</code>","text":"<pre><code>seq_region: tuple[int, int]\n</code></pre> <p>GFF sequence-region start &amp; end tuple</p> <p>If <code>##sequence-region</code> pragma is not found, seq_region=<code>(0, max_coords_value)</code></p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.records","title":"records  <code>property</code>","text":"<pre><code>records: list[GffRecord]\n</code></pre> <p>GFF records (only target seqid)</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.all_records","title":"all_records  <code>property</code>","text":"<pre><code>all_records: list[GffRecord]\n</code></pre> <p>All GFF records</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.target_seqid","title":"target_seqid  <code>property</code>","text":"<pre><code>target_seqid: str\n</code></pre> <p>Target seqid</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.seqid_list","title":"seqid_list  <code>property</code>","text":"<pre><code>seqid_list: list[str]\n</code></pre> <p>seqid list</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.genome_length","title":"genome_length  <code>property</code>","text":"<pre><code>genome_length: int\n</code></pre> <p>Genome length (target seqid record)</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.full_genome_length","title":"full_genome_length  <code>property</code>","text":"<pre><code>full_genome_length: int\n</code></pre> <p>Full genome length (concatenate all records)</p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.get_seqid2size","title":"get_seqid2size","text":"<pre><code>get_seqid2size() -&gt; dict[str, int]\n</code></pre> <p>Get seqid &amp; complete/contig/scaffold genome size dict</p> <p>By default, size is defined by <code>##sequence-region</code> pragma of target seqid. If <code>##sequence-region</code> is not found, size is defined by max coordinate size in target seqid features. This may differ from actual genome size.</p> RETURNS DESCRIPTION <code>seqid2size</code> <p>seqid &amp; genome size dict</p> <p> TYPE: <code>dict[str, int]</code> </p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.get_seqid2features","title":"get_seqid2features","text":"<pre><code>get_seqid2features(\n    feature_type: str | list[str] | None = \"CDS\", target_strand: int | None = None\n) -&gt; dict[str, list[SeqFeature]]\n</code></pre> <p>Get seqid &amp; features in target seqid genome dict</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Feature type (<code>CDS</code>, <code>gene</code>, <code>mRNA</code>, etc...) If None, extract regardless of feature type.</p> <p> TYPE: <code>str | list[str] | None</code> DEFAULT: <code>'CDS'</code> </p> <code>target_strand</code> <p>Extract target strand. If None, extract regardless of strand.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>seqid2features</code> <p>seqid &amp; features dict</p> <p> TYPE: <code>dict[str, list[SeqFeature]]</code> </p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.extract_features","title":"extract_features","text":"<pre><code>extract_features(\n    feature_type: str | list[str] | None = \"CDS\",\n    *,\n    target_strand: int | None = None,\n    target_range: tuple[int, int] | None = None\n) -&gt; list[SeqFeature]\n</code></pre> <p>Extract features</p> <p>If <code>target_seqid</code> is specified when the Gff instance initialized, then the features of the target seqid are extracted. Otherwise, extract the features of the seqid in the first row.</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Feature type (<code>CDS</code>, <code>gene</code>, <code>mRNA</code>, etc...) If None, extract regardless of feature type.</p> <p> TYPE: <code>str | list[str] | None</code> DEFAULT: <code>'CDS'</code> </p> <code>target_strand</code> <p>Extract target strand. If None, extract regardless of strand.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>target_range</code> <p>Extract target range. If None, extract regardless of range.</p> <p> TYPE: <code>tuple[int, int] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>features</code> <p>Feature list</p> <p> TYPE: <code>list[SeqFeature]</code> </p>"},{"location":"api-docs/gff/#pygenomeviz.parser.gff.Gff.extract_exon_features","title":"extract_exon_features","text":"<pre><code>extract_exon_features(\n    feature_type: str = \"mRNA\",\n    *,\n    target_strand: int | None = None,\n    target_range: tuple[int, int] | None = None\n) -&gt; list[SeqFeature]\n</code></pre> <p>Extract exon structure features</p> <p>Extract exons based on <code>parent feature</code> and <code>exon</code> ID-Parent relation</p> PARAMETER DESCRIPTION <code>feature_type</code> <p>Feature type (e.g. <code>mRNA</code>, <code>ncRNA</code> , etc...)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'mRNA'</code> </p> <code>target_strand</code> <p>Extract target strand. If None, extract regardless of strand.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>target_range</code> <p>Extract target range. If None, extract regardless of range.</p> <p> TYPE: <code>tuple[int, int] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>features</code> <p>Feature list</p> <p> TYPE: <code>list[SeqFeature]</code> </p>"},{"location":"api-docs/segment/","title":"FeatureSegment Class","text":""},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment","title":"FeatureSegment","text":"<pre><code>FeatureSegment(name: str, start: int, end: int, feature_track: FeatureTrack)\n</code></pre> <p>Feature Segment Class</p> PARAMETER DESCRIPTION <code>name</code> <p>Segment name</p> <p> TYPE: <code>str</code> </p> <code>start</code> <p>Segment start position</p> <p> TYPE: <code>int</code> </p> <code>end</code> <p>Segment end position</p> <p> TYPE: <code>int</code> </p> <code>feature_track</code> <p>Parent feature track</p> <p> TYPE: <code>FeatureTrack</code> </p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Segment name</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.start","title":"start  <code>property</code>","text":"<pre><code>start: int\n</code></pre> <p>Segment start position</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.end","title":"end  <code>property</code>","text":"<pre><code>end: int\n</code></pre> <p>Segment end position</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.range","title":"range  <code>property</code>","text":"<pre><code>range: tuple[int, int]\n</code></pre> <p>Segment (start, end) range</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.size","title":"size  <code>property</code>","text":"<pre><code>size: int\n</code></pre> <p>Segment size</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.feature_track","title":"feature_track  <code>property</code>","text":"<pre><code>feature_track: FeatureTrack\n</code></pre> <p>Parent feature track</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.track_start","title":"track_start  <code>property</code>","text":"<pre><code>track_start: int\n</code></pre> <p>Segment start position in track</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.track_end","title":"track_end  <code>property</code>","text":"<pre><code>track_end: int\n</code></pre> <p>Segment end position in track</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.gid2feature_dict","title":"gid2feature_dict  <code>property</code>","text":"<pre><code>gid2feature_dict: dict[str, dict[str, Any]]\n</code></pre> <p>gid &amp; feature dict (Sort by start coordinate)</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.transform_features","title":"transform_features  <code>property</code>","text":"<pre><code>transform_features: list[SeqFeature]\n</code></pre> <p>Coordinate transformed features</p> <p>Segment-level coordinate is transformed to track-level coordinate.</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.transform_exon_features","title":"transform_exon_features  <code>property</code>","text":"<pre><code>transform_exon_features: list[SeqFeature]\n</code></pre> <p>Coordinate transformed exon features</p> <p>Segment-level coordinate is transformed to track-level coordinate.</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.transform_text_kws_list","title":"transform_text_kws_list  <code>property</code>","text":"<pre><code>transform_text_kws_list: list[dict[str, Any]]\n</code></pre> <p>Coordinate transformed text keywords list</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.is_within_range","title":"is_within_range","text":"<pre><code>is_within_range(pos: int | tuple[int, int]) -&gt; bool\n</code></pre> <p>Check target pos is within segment range</p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.transform_coord","title":"transform_coord","text":"<pre><code>transform_coord(x: int) -&gt; int\n</code></pre><pre><code>transform_coord(x: float) -&gt; float\n</code></pre><pre><code>transform_coord(x: NDArray) -&gt; NDArray[np.float64]\n</code></pre> <pre><code>transform_coord(x: int | float | NDArray) -&gt; int | float | NDArray[np.float64]\n</code></pre> <p>Transform segment-level coordinate to track-level coordinate</p> PARAMETER DESCRIPTION <code>x</code> <p>Segment level coordinate(s)</p> <p> TYPE: <code>int | float | NDArray</code> </p> RETURNS DESCRIPTION <code>track_coord</code> <p>Track level coordinate(s)</p> <p> TYPE: <code>int | float | NDArray[float64]</code> </p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.add_text","title":"add_text","text":"<pre><code>add_text(\n    x: float,\n    text: str,\n    *,\n    size: float = 12,\n    vpos: VPos = \"top\",\n    hpos: HPos = \"left\",\n    ymargin: float = 0.2,\n    rotation: float = 45,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Add text</p> PARAMETER DESCRIPTION <code>x</code> <p>Text x coordinate</p> <p> TYPE: <code>float</code> </p> <code>text</code> <p>Text content</p> <p> TYPE: <code>str</code> </p> <code>size</code> <p>Text size</p> <p> TYPE: <code>float</code> DEFAULT: <code>12</code> </p> <code>vpos</code> <p>Vertical position (<code>top</code>|<code>center</code>|<code>bottom</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'top'</code> </p> <code>hpos</code> <p>Horizontal position (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'left'</code> </p> <code>ymargin</code> <p>Y margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>rotation</code> <p>Text rotation</p> <p> TYPE: <code>float</code> DEFAULT: <code>45</code> </p> <code>**kwargs</code> <p>Text properties (e.g. <code>color=\"red\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.add_sublabel","title":"add_sublabel","text":"<pre><code>add_sublabel(\n    text: str | None = None,\n    *,\n    size: float = 12,\n    pos: str = \"bottom-left\",\n    ymargin: float = 0.2,\n    rotation: float = 0,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Add sublabel</p> PARAMETER DESCRIPTION <code>text</code> <p>Text content. If None, <code>{start:,} - {end:,} bp</code> label is set.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>size</code> <p>Text size</p> <p> TYPE: <code>float</code> DEFAULT: <code>12</code> </p> <code>pos</code> <p>Label position ([<code>top</code>|<code>bottom</code>]-[<code>left</code>|<code>center</code>|<code>right</code>])</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bottom-left'</code> </p> <code>ymargin</code> <p>Y margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>rotation</code> <p>Text rotation</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>**kwargs</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>color=\"red\", ...</code>)</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.add_feature","title":"add_feature","text":"<pre><code>add_feature(\n    start: int,\n    end: int,\n    strand: int = 1,\n    *,\n    plotstyle: PlotStyle = \"arrow\",\n    arrow_shaft_ratio: float = 0.5,\n    extra_tooltip: dict[str, str] | None = None,\n    label: str = \"\",\n    text_kws: dict[str, Any] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Add feature</p> PARAMETER DESCRIPTION <code>start</code> <p>Start position</p> <p> TYPE: <code>int</code> </p> <code>end</code> <p>End position</p> <p> TYPE: <code>int</code> </p> <code>strand</code> <p>Feature strand</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>PlotStyle</code> DEFAULT: <code>'arrow'</code> </p> <code>arrow_shaft_ratio</code> <p>Arrow shaft size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>extra_tooltip</code> <p>Extra tooltip dict for html figure</p> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>label</code> <p>Feature label text</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>text_kws</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>dict(size=12, color=\"red\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", lw=0.5, hatch=\"//\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.add_features","title":"add_features","text":"<pre><code>add_features(\n    features: SeqFeature | list[SeqFeature],\n    *,\n    plotstyle: PlotStyle = \"arrow\",\n    arrow_shaft_ratio: float = 0.5,\n    label_type: str | None = None,\n    label_handler: Callable[[str], str] | None = None,\n    extra_tooltip: dict[str, str] | None = None,\n    ignore_outside_range: bool = False,\n    text_kws: dict[str, Any] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Add features (BioPython SeqFeature)</p> PARAMETER DESCRIPTION <code>features</code> <p>BioPython SeqFeature or SeqFeature list</p> <p> TYPE: <code>SeqFeature | list[SeqFeature]</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>PlotStyle</code> DEFAULT: <code>'arrow'</code> </p> <code>arrow_shaft_ratio</code> <p>Arrow shaft size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>label_type</code> <p>Label type (e.g. <code>gene</code>,<code>protein_id</code>,<code>product</code>, etc...)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>label_handler</code> <p>Label handler function to customize label display. If None, set label handler to exclude labels containing <code>hypothetical</code>.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> <code>extra_tooltip</code> <p>Extra tooltip dict for html figure</p> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>ignore_outside_range</code> <p>If True and the feature position is outside the range of the track segment, ignore it without raising an error.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>text_kws</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>dict(color=\"red\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", lw=0.5, hatch=\"//\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.add_exon_feature","title":"add_exon_feature","text":"<pre><code>add_exon_feature(\n    locs: list[tuple[int, int]],\n    strand: int = 1,\n    *,\n    plotstyle: PlotStyle = \"arrow\",\n    arrow_shaft_ratio: float = 0.5,\n    label: str = \"\",\n    patch_kws: dict[str, Any] | None = None,\n    intron_patch_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Add exon feature</p> PARAMETER DESCRIPTION <code>locs</code> <p>Exon locations (e.g. <code>[(0, 100), (200, 300), (350, 400)]</code>)</p> <p> TYPE: <code>list[tuple[int, int]]</code> </p> <code>strand</code> <p>Feature strand</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>PlotStyle</code> DEFAULT: <code>'arrow'</code> </p> <code>arrow_shaft_ratio</code> <p>Arrow shaft size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>label</code> <p>Feature label</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>patch_kws</code> <p>Exon patch properties (e.g. <code>dict(fc=\"red\", lw=0.5, hatch=\"//\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>intron_patch_kws</code> <p>Intron patch properties (e.g. <code>dict(color=\"red\", lw=2.0, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>dict(size=12, color=\"red\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/segment/#pygenomeviz.segment.feature.FeatureSegment.add_exon_features","title":"add_exon_features","text":"<pre><code>add_exon_features(\n    features: SeqFeature | list[SeqFeature],\n    *,\n    plotstyle: PlotStyle = \"arrow\",\n    arrow_shaft_ratio: float = 0.5,\n    label_type: str | None = None,\n    label_handler: Callable[[str], str] | None = None,\n    extra_tooltip: dict[str, str] | None = None,\n    ignore_outside_range: bool = False,\n    patch_kws: dict[str, Any] | None = None,\n    intron_patch_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Add exon features (BioPython SeqFeature)</p> PARAMETER DESCRIPTION <code>features</code> <p>BioPython SeqFeature or SeqFeature list</p> <p> TYPE: <code>SeqFeature | list[SeqFeature]</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>PlotStyle</code> DEFAULT: <code>'arrow'</code> </p> <code>arrow_shaft_ratio</code> <p>Arrow shaft size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>label_type</code> <p>Label type (e.g. <code>gene</code>,<code>protein_id</code>,<code>product</code>, etc...)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>label_handler</code> <p>Label handler function to customize label display. If None, set label handler to exclude labels containing <code>hypothetical</code>.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> <code>extra_tooltip</code> <p>Extra tooltip dict for html figure</p> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>ignore_outside_range</code> <p>If True and the feature position is outside the range of the track segment, ignore it without raising an error.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>patch_kws</code> <p>Exon patch properties (e.g. <code>dict(fc=\"red\", lw=0.5, hatch=\"//\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>intron_patch_kws</code> <p>Intron patch properties (e.g. <code>dict(color=\"red\", lw=2.0, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>dict(size=12, color=\"red\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/","title":"FeatureTrack Class","text":""},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack","title":"FeatureTrack","text":"<pre><code>FeatureTrack(\n    name: str,\n    seg_name2range: Mapping[str, tuple[int, int]],\n    *,\n    ratio: float = 1.0,\n    space: float | list[float] = 0.01,\n    offset: int | TrackAlignType = \"left\",\n    labelsize: float = 20,\n    labelmargin: float = 0.01,\n    align_label: bool = True,\n    label_kws: dict[str, Any] | None = None,\n    line_kws: dict[str, Any] | None = None\n)\n</code></pre> <p>               Bases: <code>Track</code></p> <p>Feature Track Class</p> PARAMETER DESCRIPTION <code>name</code> <p>Track name</p> <p> TYPE: <code>str</code> </p> <code>seg_name2range</code> <p>Segment name &amp; range dict</p> <p> TYPE: <code>Mapping[str, tuple[int, int]]</code> </p> <code>ratio</code> <p>Track size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>space</code> <p>Space ratio between segments</p> <p> TYPE: <code>float | list[float]</code> DEFAULT: <code>0.01</code> </p> <code>offset</code> <p>Offset int value or TrackAlignType (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>int | TrackAlignType</code> DEFAULT: <code>'left'</code> </p> <code>labelsize</code> <p>Track label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>20</code> </p> <code>labelmargin</code> <p>Track label margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>align_label</code> <p>If True, align track label to the most left position. If False, set track label to first segment start position.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>label_kws</code> <p>Text properties (e.g. <code>dict(size=25, color=\"red\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>line_kws</code> <p>Axes.plot properties (e.g. <code>dict(color=\"grey\", lw=0.5, ls=\"--\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.label","title":"label  <code>property</code>","text":"<pre><code>label: str\n</code></pre> <p>Track label (By default, <code>track.label</code> = <code>track.name</code>)</p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.offset","title":"offset  <code>property</code>","text":"<pre><code>offset: int\n</code></pre> <p>Track offset</p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.segments","title":"segments  <code>property</code>","text":"<pre><code>segments: list[FeatureSegment]\n</code></pre> <p>Segments</p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.subtracks","title":"subtracks  <code>property</code>","text":"<pre><code>subtracks: list[FeatureSubTrack]\n</code></pre> <p>Subtracks</p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.total_seg_size","title":"total_seg_size  <code>property</code>","text":"<pre><code>total_seg_size: int\n</code></pre> <p>Total segment size</p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.spaces","title":"spaces  <code>property</code>","text":"<pre><code>spaces: list[int]\n</code></pre> <p>Spaces between segments</p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.max_track_total_seg_size","title":"max_track_total_seg_size  <code>property</code>","text":"<pre><code>max_track_total_seg_size: int\n</code></pre> <p>Max track total segment size (Use space calculation)</p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.plot_size","title":"plot_size  <code>property</code>","text":"<pre><code>plot_size: int\n</code></pre> <p>Plot x size (<code>total_seg_size</code> + <code>sum(spaces)</code>)</p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.set_max_track_total_seg_size","title":"set_max_track_total_seg_size","text":"<pre><code>set_max_track_total_seg_size(max_track_total_seg_size: int) -&gt; None\n</code></pre> <p>Set max track total segment size</p> <p>This method is expected to be called within the GenomeViz instance to update track status. General users should not use this method.</p> PARAMETER DESCRIPTION <code>max_track_total_seg_size</code> <p>Max track total segment size</p> <p> TYPE: <code>int</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.set_label","title":"set_label","text":"<pre><code>set_label(label: str) -&gt; None\n</code></pre> <p>Set track label (By default, <code>track.label</code> = <code>track.name</code>)</p> PARAMETER DESCRIPTION <code>label</code> <p>Track label</p> <p> TYPE: <code>str</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.set_segment_sep","title":"set_segment_sep","text":"<pre><code>set_segment_sep(\n    sep: bool | list[bool] = True,\n    *,\n    symbol: str = \"//\",\n    size: float = 20,\n    color: str = \"grey\",\n    **kwargs\n) -&gt; None\n</code></pre> <p>Set segment separator symbol text</p> PARAMETER DESCRIPTION <code>sep</code> <p>If True, insert separator text between all segments. If list[bool], insert separator text between segments where True.</p> <p> TYPE: <code>bool | list[bool]</code> DEFAULT: <code>True</code> </p> <code>symbol</code> <p>Separator symbol text</p> <p> TYPE: <code>str</code> DEFAULT: <code>'//'</code> </p> <code>size</code> <p>Separator symbol size</p> <p> TYPE: <code>float</code> DEFAULT: <code>20</code> </p> <code>color</code> <p>Separator symbol color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'grey'</code> </p> <code>**kwargs</code> <p>Text properties https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.add_subtrack","title":"add_subtrack","text":"<pre><code>add_subtrack(\n    name: str | None = None, *, ratio: float = 1.0, ylim: tuple[int, int] = (0, 100)\n) -&gt; FeatureSubTrack\n</code></pre> <p>Add subtrack for user-defined plot axes</p> PARAMETER DESCRIPTION <code>name</code> <p>Track name</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>ratio</code> <p>Subtrack size ratio to feature track</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>ylim</code> <p>Axes ylim</p> <p> TYPE: <code>tuple[int, int]</code> DEFAULT: <code>(0, 100)</code> </p> RETURNS DESCRIPTION <code>subtrack</code> <p>Subtrack</p> <p> TYPE: <code>FeatureSubTrack</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.get_subtrack","title":"get_subtrack","text":"<pre><code>get_subtrack(name: str | None = None) -&gt; FeatureSubTrack\n</code></pre> <p>Get subtrack by name</p> <p>If no subtrack found, raise error.</p> PARAMETER DESCRIPTION <code>name</code> <p>Target subtrack name. If None, first subtrack is returned.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>subtrack</code> <p>Target subtrack</p> <p> TYPE: <code>FeatureSubTrack</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.get_segment","title":"get_segment","text":"<pre><code>get_segment(name: str | None = None) -&gt; FeatureSegment\n</code></pre> <p>Get segment by name</p> PARAMETER DESCRIPTION <code>name</code> <p>Target segment name. If None, first segment is returned.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>segment</code> <p>Target segment</p> <p> TYPE: <code>FeatureSegment</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.add_text","title":"add_text","text":"<pre><code>add_text(\n    x: float,\n    text: str,\n    *,\n    target_seg: str | None = None,\n    size: float = 15,\n    vpos: VPos = \"top\",\n    hpos: HPos = \"left\",\n    ymargin: float = 0.2,\n    rotation: float = 45,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Add text to track segment</p> PARAMETER DESCRIPTION <code>x</code> <p>Text x coordinate</p> <p> TYPE: <code>float</code> </p> <code>text</code> <p>Text content</p> <p> TYPE: <code>str</code> </p> <code>target_seg</code> <p>Target segment name. If None, first segment is selected.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>size</code> <p>Text size</p> <p> TYPE: <code>float</code> DEFAULT: <code>15</code> </p> <code>vpos</code> <p>Vertical position (<code>top</code>|<code>center</code>|<code>bottom</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'top'</code> </p> <code>hpos</code> <p>Horizontal position (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'left'</code> </p> <code>ymargin</code> <p>Y margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>rotation</code> <p>Text rotation</p> <p> TYPE: <code>float</code> DEFAULT: <code>45</code> </p> <code>**kwargs</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>color=\"red\", ...</code>)</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.add_sublabel","title":"add_sublabel","text":"<pre><code>add_sublabel(\n    text: str | None = None,\n    *,\n    target_seg: str | None = None,\n    size: float = 12,\n    pos: str = \"bottom-left\",\n    ymargin: float = 0.2,\n    rotation: float = 0,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Add sublabel to corners of the track segment</p> PARAMETER DESCRIPTION <code>text</code> <p>Text content</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>target_seg</code> <p>Target segment name. If None, first segment is selected.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>size</code> <p>Text size</p> <p> TYPE: <code>float</code> DEFAULT: <code>12</code> </p> <code>pos</code> <p>Label position ([<code>top</code>|<code>bottom</code>]-[<code>left</code>|<code>center</code>|<code>right</code>])</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bottom-left'</code> </p> <code>ymargin</code> <p>Y margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>rotation</code> <p>Text rotation</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>**kwargs</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>color=\"red\", ...</code>)</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.add_feature","title":"add_feature","text":"<pre><code>add_feature(\n    start: int,\n    end: int,\n    strand: int = 1,\n    *,\n    target_seg: str | None = None,\n    plotstyle: PlotStyle = \"arrow\",\n    arrow_shaft_ratio: float = 0.5,\n    extra_tooltip: dict[str, str] | None = None,\n    label: str = \"\",\n    text_kws: dict[str, Any] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Add feature</p> PARAMETER DESCRIPTION <code>start</code> <p>Start position</p> <p> TYPE: <code>int</code> </p> <code>end</code> <p>End position</p> <p> TYPE: <code>int</code> </p> <code>strand</code> <p>Feature strand</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>target_seg</code> <p>Target segment name. If None, first segment is selected.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>PlotStyle</code> DEFAULT: <code>'arrow'</code> </p> <code>arrow_shaft_ratio</code> <p>Arrow shaft size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>extra_tooltip</code> <p>Extra tooltip dict for html figure</p> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>label</code> <p>Feature label</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>text_kws</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>dict(size=12, color=\"red\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", lw=0.5, hatch=\"//\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.add_features","title":"add_features","text":"<pre><code>add_features(\n    features: SeqFeature | list[SeqFeature],\n    *,\n    target_seg: str | None = None,\n    plotstyle: PlotStyle = \"arrow\",\n    arrow_shaft_ratio: float = 0.5,\n    label_type: str | None = None,\n    label_handler: Callable[[str], str] | None = None,\n    extra_tooltip: dict[str, str] | None = None,\n    ignore_outside_range: bool = False,\n    text_kws: dict[str, Any] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Add features (BioPython SeqFeature)</p> PARAMETER DESCRIPTION <code>features</code> <p>BioPython SeqFeature or SeqFeature list</p> <p> TYPE: <code>SeqFeature | list[SeqFeature]</code> </p> <code>target_seg</code> <p>Target segment name. If None, first segment is selected.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>PlotStyle</code> DEFAULT: <code>'arrow'</code> </p> <code>arrow_shaft_ratio</code> <p>Arrow shaft size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>label_type</code> <p>Label type (e.g. <code>gene</code>,<code>protein_id</code>,<code>product</code>,etc...)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>label_handler</code> <p>Label handler function to customize label display. If None, set label handler to exclude labels containing <code>hypothetical</code>.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> <code>extra_tooltip</code> <p>Extra tooltip dict for html figure</p> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>ignore_outside_range</code> <p>If True and the feature position is outside the range of the track segment, ignore it without raising an error.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>text_kws</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>dict(size=12, color=\"red\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", lw=0.5, hatch=\"//\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.add_exon_feature","title":"add_exon_feature","text":"<pre><code>add_exon_feature(\n    locs: list[tuple[int, int]],\n    strand: int = 1,\n    *,\n    target_seg: str | None = None,\n    plotstyle: PlotStyle = \"arrow\",\n    arrow_shaft_ratio: float = 0.5,\n    label: str = \"\",\n    patch_kws: dict[str, Any] | None = None,\n    intron_patch_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Add exon feature</p> PARAMETER DESCRIPTION <code>locs</code> <p>Exon locations (e.g. <code>[(0, 100), (200, 300), (350, 400)]</code>)</p> <p> TYPE: <code>list[tuple[int, int]]</code> </p> <code>strand</code> <p>Feature strand</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>target_seg</code> <p>Target segment name. If None, first segment is selected.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>PlotStyle</code> DEFAULT: <code>'arrow'</code> </p> <code>arrow_shaft_ratio</code> <p>Arrow shaft size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>label</code> <p>Feature label</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>patch_kws</code> <p>Exon patch properties (e.g. <code>dict(fc=\"red\", lw=0.5, hatch=\"//\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>intron_patch_kws</code> <p>Intron patch properties (e.g. <code>dict(color=\"red\", lw=2.0, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>dict(size=12, color=\"red\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.add_exon_features","title":"add_exon_features","text":"<pre><code>add_exon_features(\n    features: SeqFeature | list[SeqFeature],\n    *,\n    target_seg: str | None = None,\n    plotstyle: PlotStyle = \"arrow\",\n    arrow_shaft_ratio: float = 0.5,\n    label_type: str | None = None,\n    label_handler: Callable[[str], str] | None = None,\n    extra_tooltip: dict[str, str] | None = None,\n    ignore_outside_range: bool = False,\n    patch_kws: dict[str, Any] | None = None,\n    intron_patch_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Add exon features</p> PARAMETER DESCRIPTION <code>features</code> <p>BioPython SeqFeature or SeqFeature list</p> <p> TYPE: <code>SeqFeature | list[SeqFeature]</code> </p> <code>target_seg</code> <p>Target segment name. If None, first segment is selected.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>plotstyle</code> <p>Feature plot style (<code>bigarrow</code>|<code>arrow</code>|<code>bigbox</code>|<code>box</code>|<code>bigrbox</code>|<code>rbox</code>)</p> <p> TYPE: <code>PlotStyle</code> DEFAULT: <code>'arrow'</code> </p> <code>arrow_shaft_ratio</code> <p>Arrow shaft size ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>label_type</code> <p>Label type (e.g. <code>gene</code>,<code>protein_id</code>,<code>product</code>, etc...)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>label_handler</code> <p>Label handler function to customize label display. If None, set label handler to exclude labels containing <code>hypothetical</code>.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> <code>extra_tooltip</code> <p>Extra tooltip dict for html figure</p> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>ignore_outside_range</code> <p>If True and the feature position is outside the range of the track segment, ignore it without raising an error.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>patch_kws</code> <p>Exon patch properties (e.g. <code>dict(fc=\"red\", lw=0.5, hatch=\"//\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>intron_patch_kws</code> <p>Intron patch properties (e.g. <code>dict(color=\"red\", lw=2.0, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p><code>segment.add_text()</code> method keyword arguments (e.g. <code>dict(size=12, color=\"red\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.transform_coord","title":"transform_coord","text":"<pre><code>transform_coord(x: int, *, target_seg: str | None = None) -&gt; int\n</code></pre><pre><code>transform_coord(x: float, *, target_seg: str | None = None) -&gt; float\n</code></pre><pre><code>transform_coord(x: NDArray, *, target_seg: str | None = None) -&gt; NDArray[np.float64]\n</code></pre> <pre><code>transform_coord(\n    x: int | float | NDArray, *, target_seg: str | None = None\n) -&gt; int | float | NDArray[np.float64]\n</code></pre> <p>Transform segment-level coordinate to track-level coordinate</p> PARAMETER DESCRIPTION <code>x</code> <p>Segment-level coordinate(s)</p> <p> TYPE: <code>int | float | NDArray</code> </p> <code>target_seg</code> <p>Target segment name. If None, first segment is selected.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>transform_x</code> <p>Track-level coordinate(s)</p> <p> TYPE: <code>int | float | NDArray[float64]</code> </p>"},{"location":"api-docs/track/#pygenomeviz.track.feature.FeatureTrack.plot_all","title":"plot_all","text":"<pre><code>plot_all(fast_render: bool = True) -&gt; None\n</code></pre> <p>Plot all objects (Expected to be called in <code>gv.plotfig()</code>)</p> <ol> <li>Plot track label</li> <li>Plot segment lines</li> <li>Plot segment separator</li> <li>Plot features</li> <li>Plot texts</li> </ol> PARAMETER DESCRIPTION <code>fast_render</code> <p>Enable fast rendering using PatchCollection plot style.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"api-docs/utils/","title":"utils","text":""},{"location":"api-docs/utils/#pygenomeviz.utils","title":"utils","text":""},{"location":"api-docs/utils/#pygenomeviz.utils.ColorCycler","title":"ColorCycler","text":"<p>Color Cycler Class</p>"},{"location":"api-docs/utils/#pygenomeviz.utils.ColorCycler.__new__","title":"__new__","text":"<pre><code>__new__(n: int | None = None) -&gt; str\n</code></pre> <p>Get hexcolor cyclically from cmap by counter or user specified number</p> <p><code>ColorCycler()</code> works same as <code>ColorCycler.get_color()</code> (syntactic sugar)</p> PARAMETER DESCRIPTION <code>n</code> <p>Number for color cycle. If None, counter class variable is used.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>hexcolor</code> <p>Cyclic hexcolor string</p> <p> TYPE: <code>str</code> </p>"},{"location":"api-docs/utils/#pygenomeviz.utils.ColorCycler.reset_cycle","title":"reset_cycle  <code>classmethod</code>","text":"<pre><code>reset_cycle() -&gt; None\n</code></pre> <p>Reset cycle counter</p>"},{"location":"api-docs/utils/#pygenomeviz.utils.ColorCycler.set_cmap","title":"set_cmap  <code>classmethod</code>","text":"<pre><code>set_cmap(name: str) -&gt; None\n</code></pre> <p>Set colormap (Default: <code>tab10</code>)</p>"},{"location":"api-docs/utils/#pygenomeviz.utils.ColorCycler.get_color","title":"get_color  <code>classmethod</code>","text":"<pre><code>get_color(n: int | None = None) -&gt; str\n</code></pre> <p>Get hexcolor cyclically from cmap by counter or user specified number</p> PARAMETER DESCRIPTION <code>n</code> <p>Number for color cycle. If None, counter class variable is used.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>hexcolor</code> <p>Cyclic hexcolor string</p> <p> TYPE: <code>str</code> </p>"},{"location":"api-docs/utils/#pygenomeviz.utils.ColorCycler.get_color_list","title":"get_color_list  <code>classmethod</code>","text":"<pre><code>get_color_list(n: int | None = None) -&gt; list[str]\n</code></pre> <p>Get hexcolor list of colormap</p> PARAMETER DESCRIPTION <code>n</code> <p>If n is None, all(=cmap.N) hexcolors are extracted from colormap. If n is specified, hexcolors are extracted from n equally divided colormap.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>hexcolor_list</code> <p>Hexcolor list</p> <p> TYPE: <code>list[str]</code> </p>"},{"location":"api-docs/utils/#pygenomeviz.utils.fetch_genbank_by_accid","title":"fetch_genbank_by_accid","text":"<pre><code>fetch_genbank_by_accid(\n    accid: str, gbk_outfile: str | Path | None = None, email: str | None = None\n) -&gt; TextIOWrapper\n</code></pre> <p>Fetch genbank text by 'Accession ID'</p> PARAMETER DESCRIPTION <code>accid</code> <p>Accession ID</p> <p> TYPE: <code>str</code> </p> <code>gbk_outfile</code> <p>If file path is set, write fetch data to file</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>email</code> <p>Email address to notify download limitation (Required for bulk download)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>TextIOWrapper</code> <p>Genbank data</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; gbk_text = fetch_genbank_by_accid(\"NC_013600\")\n&gt;&gt;&gt; gbk = Genbank(gbk_text)\n</code></pre>"},{"location":"api-docs/utils/#pygenomeviz.utils.load_example_fasta_dataset","title":"load_example_fasta_dataset","text":"<pre><code>load_example_fasta_dataset(\n    name: GenbankDatasetName,\n    *,\n    cache_dir: str | Path | None = None,\n    overwrite_cache: bool = False\n) -&gt; list[Path]\n</code></pre> <p>Load pygenomeviz example fasta dataset</p> <p>Load genbank datasets from https://github.com/moshi4/pygenomeviz-data-v1 and convert genbank to fasta format. Cache datasets in local directory (Default: <code>~/.cache/pygenomeviz/</code>).</p> <p>List of dataset name</p> <ul> <li><code>acinetobacter_phage</code> (4 species)</li> <li><code>yersinia_phage</code> (4 species)</li> <li><code>enterobacteria_phage</code> (6 species)</li> <li><code>mycoplasma_mycoides</code> (4 species)</li> <li><code>escherichia_coli</code> (4 species, gzip compressed)</li> <li><code>saccharomyces</code> (3 species, gzip compressed)</li> </ul> PARAMETER DESCRIPTION <code>name</code> <p>Dataset name (e.g. <code>enterobacteria_phage</code>)</p> <p> TYPE: <code>str</code> </p> <code>cache_dir</code> <p>Output cache directory (Default: <code>~/.cache/pygenomeviz/</code>)</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>overwrite_cache</code> <p>If True, overwrite cached dataset</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>quiet</code> <p>If True, no print log on screen.</p> <p> TYPE: <code>bool</code> </p> RETURNS DESCRIPTION <code>fasta_files</code> <p>Fasta files</p> <p> TYPE: <code>list[Path]</code> </p>"},{"location":"api-docs/utils/#pygenomeviz.utils.load_example_genbank_dataset","title":"load_example_genbank_dataset","text":"<pre><code>load_example_genbank_dataset(\n    name: GenbankDatasetName,\n    *,\n    cache_dir: str | Path | None = None,\n    overwrite_cache: bool = False\n) -&gt; list[Path]\n</code></pre> <p>Load pygenomeviz example genbank dataset</p> <p>Load genbank datasets from https://github.com/moshi4/pygenomeviz-data-v1 and cache datasets in local directory (Default: <code>~/.cache/pygenomeviz/</code>).</p> <p>List of dataset name</p> <ul> <li><code>acinetobacter_phage</code> (4 species)</li> <li><code>yersinia_phage</code> (4 species)</li> <li><code>enterobacteria_phage</code> (6 species)</li> <li><code>mycoplasma_mycoides</code> (4 species)</li> <li><code>escherichia_coli</code> (4 species, gzip compressed)</li> <li><code>saccharomyces</code> (3 species, gzip compressed)</li> </ul> PARAMETER DESCRIPTION <code>name</code> <p>Dataset name (e.g. <code>enterobacteria_phage</code>)</p> <p> TYPE: <code>str</code> </p> <code>cache_dir</code> <p>Output cache directory (Default: <code>~/.cache/pygenomeviz/</code>)</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>overwrite_cache</code> <p>If True, overwrite cached dataset</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>gbk_files</code> <p>Genbank files</p> <p> TYPE: <code>list[Path]</code> </p>"},{"location":"api-docs/utils/#pygenomeviz.utils.load_example_gff_file","title":"load_example_gff_file","text":"<pre><code>load_example_gff_file(\n    filename: GffExampleFileName,\n    *,\n    cache_dir: str | Path | None = None,\n    overwrite_cache: bool = False\n) -&gt; Path\n</code></pre> <p>Load pygenomeviz example GFF file</p> <p>Load example GFF file from https://github.com/moshi4/pygenomeviz-data-v1/ and cache GFF file in local directory (Default: <code>~/.cache/pygenomeviz/</code>).</p> <p>List of example GFF filename</p> <ul> <li><code>enterobacteria_phage.gff</code></li> <li><code>mycoplasma_mycoides.gff</code></li> <li><code>escherichia_coli.gff.gz</code></li> <li><code>saccharomyces_cerevisiae.gff.gz</code></li> </ul> PARAMETER DESCRIPTION <code>filename</code> <p>GFF filename (e.g. <code>enterobacteria_phage.gff</code>)</p> <p> TYPE: <code>str</code> </p> <code>cache_dir</code> <p>Output cache directory (Default: <code>~/.cache/pygenomeviz/</code>)</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>overwrite_cache</code> <p>If True, overwrite cached GFF file</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>gff_file</code> <p>GFF file</p> <p> TYPE: <code>Path</code> </p>"},{"location":"api-docs/utils/#pygenomeviz.utils.extract_features_within_range","title":"extract_features_within_range","text":"<pre><code>extract_features_within_range(\n    features: list[SeqFeature], *, target_range: tuple[int, int]\n) -&gt; list[SeqFeature]\n</code></pre> <p>Extract features by target range</p> PARAMETER DESCRIPTION <code>features</code> <p>Features to be extracted</p> <p> TYPE: <code>list[SeqFeature]</code> </p> <code>target_range</code> <p>Target range</p> <p> TYPE: <code>tuple[int, int]</code> </p> RETURNS DESCRIPTION <code>range_features</code> <p>Features within target range</p> <p> TYPE: <code>list[SeqFeature]</code> </p>"},{"location":"api-docs/utils/#pygenomeviz.utils.interpolate_color","title":"interpolate_color","text":"<pre><code>interpolate_color(base_color: str, v: float, vmin: float = 0, vmax: float = 100) -&gt; str\n</code></pre> <p>Interpolate the base color between vmin and vmax</p> <p><code>vmin[nearly white] &lt;= v &lt;= vmax[base_color]</code></p> PARAMETER DESCRIPTION <code>base_color</code> <p>Base color for interpolation</p> <p> TYPE: <code>str</code> </p> <code>v</code> <p>Interpolation value</p> <p> TYPE: <code>float</code> </p> <code>vmin</code> <p>Min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Max value</p> <p> TYPE: <code>float</code> DEFAULT: <code>100</code> </p> RETURNS DESCRIPTION <code>interpolate_color</code> <p>Interpolated hexcolor</p> <p> TYPE: <code>str</code> </p>"},{"location":"api-docs/utils/#pygenomeviz.utils.is_pseudo_feature","title":"is_pseudo_feature","text":"<pre><code>is_pseudo_feature(feature: SeqFeature) -&gt; bool\n</code></pre> <p>Check target feature is pseudo or not from qualifiers tag</p> PARAMETER DESCRIPTION <code>feature</code> <p>Target feature</p> <p> TYPE: <code>SeqFeature</code> </p> RETURNS DESCRIPTION <code>check_result</code> <p>pseudo check result</p> <p> TYPE: <code>bool</code> </p>"},{"location":"api-docs/utils/#pygenomeviz.utils.to_stack_features","title":"to_stack_features","text":"<pre><code>to_stack_features(features: list[SeqFeature]) -&gt; list[list[SeqFeature]]\n</code></pre> <p>Convert feature list to non-overlap stack feature list of lists</p> PARAMETER DESCRIPTION <code>features</code> <p>Features</p> <p> TYPE: <code>list[SeqFeature]</code> </p> RETURNS DESCRIPTION <code>stack_features</code> <p>Stacked features</p> <p> TYPE: <code>list[list[SeqFeature]]</code> </p>"},{"location":"cli-docs/pgv-blast/","title":"pgv-blast","text":"<p><code>pgv-blast</code> is one of the CLI workflows in pyGenomeViz for visualization of genome alignment using BLAST(blastn, tblastx).</p> <p></p>"},{"location":"cli-docs/pgv-blast/#installation","title":"Installation","text":""},{"location":"cli-docs/pgv-blast/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge -c bioconda pygenomeviz blast\n</code></pre>"},{"location":"cli-docs/pgv-blast/#pip","title":"Pip","text":"<pre><code>pip install pygenomeviz\n</code></pre> <p>Additional installation of BLAST is required. On Ubuntu, BLAST can be installed with apt command.</p> <pre><code>sudo apt install ncbi-blast+\n</code></pre>"},{"location":"cli-docs/pgv-blast/#docker","title":"Docker","text":"<pre><code>docker run -it --rm -p 8501:8501 ghcr.io/moshi4/pygenomeviz:latest pgv-blast -h\n</code></pre>"},{"location":"cli-docs/pgv-blast/#usage","title":"Usage","text":"<pre><code>$ pgv-blast --help\nusage: pgv-blast [options] seq1.gbk seq2.gbk seq3.gbk -o outdir\n\npyGenomeViz CLI workflow using BLAST (blastn, tblastx)\n\npositional arguments:\n  seqs                    Input genbank files\n\nGeneral Options:\n  -o , --outdir           Output directory\n  --formats               Output image format ('png'[*],'jpg','svg','pdf',`html`[*])\n  --reuse                 Reuse previous alignment result if available\n  -q, --quiet             No print log on screen (default: OFF)\n  -v, --version           Print version information\n  -h, --help              Show this help message and exit\n\nBLAST Alignment Options:\n  --seqtype               Alignment sequence type ('nucleotide'[*]|'protein')\n  --threads               Threads number (Default: MaxThread - 1)\n  --length_thr            Length threshold to be plotted (Default: 0)\n  --identity_thr          Identity threshold to be plotted (Default: 0)\n  --evalue_thr            E-value threshold to be plotted (Default: 1e-03)\n\nFigure Appearence Options:\n  --fig_width             Figure width (Default: 15)\n  --fig_track_height      Figure track height (Default: 1.0)\n  --track_align_type      Figure tracks align type ('left'|'center'[*]|'right')\n  --feature_track_ratio   Feature track ratio (Default: 0.25)\n  --show_scale_bar        Show scale bar (Default: OFF)\n  --show_scale_xticks     Show scale xticks (Default: OFF)\n  --curve                 Plot curved style link (Default: OFF)\n  --dpi                   Figure DPI (Default: 300)\n  --track_labelsize       Track label size (Default: 20)\n  --scale_labelsize       Scale label size (Default: 15)\n  --normal_link_color     Normal link color (Default: 'grey')\n  --inverted_link_color   Inverted link color (Default: 'red')\n  --segment_space         Track segment space ratio (Default: 0.02)\n  --feature_type2color    Feature plot type &amp; color (Default: ['CDS:orange'])\n  --pseudo_color          Pseudo feature plot color (Default: 'lightgrey')\n  --feature_plotstyle     Feature plot style ('[big]arrow'[*]|'[big]box'|'[big]rbox')\n  --feature_linewidth     Feature line width (Default: 0.0)\n  --feature_labeltrack    Feature label target track ('top'[*]|'all')\n  --feature_labeltype     Feature label type ('product'|'gene'|'protein_id'|'None'[*])\n  --feature_labelsize     Feature label size (Default: 8)\n  --cbar_width            Colorbar width (Default: 0.01)\n  --cbar_height           Colorbar height (Default: 0.2)\n\n[*] marker means the default value.\n</code></pre> <p>--seqtype Option</p> <p><code>--seqtype nucleotide</code>: blastn, <code>--seqtype protein</code>: tblastx</p>"},{"location":"cli-docs/pgv-blast/#examples","title":"Examples","text":""},{"location":"cli-docs/pgv-blast/#example-1","title":"Example 1","text":"<p>Download example dataset:</p> <pre><code>pgv-download enterobacteria_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-blast NC_013600.gbk NC_016566.gbk NC_019724.gbk NC_024783.gbk NC_028901.gbk NC_031081.gbk \\\n          -o pgv-blast_example1 --show_scale_xticks --fig_track_height 0.6 --track_align_type left \\\n          --feature_plotstyle bigarrow\n</code></pre> <p></p>"},{"location":"cli-docs/pgv-blast/#example-2","title":"Example 2","text":"<p>Download example dataset:</p> <pre><code>pgv-download yersinia_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-blast NC_070914.gbk NC_070915.gbk NC_070916.gbk NC_070918.gbk \\\n          -o pgv-blast_example2 --seqtype protein --show_scale_bar --curve \\\n          --feature_linewidth 0.3 --length_thr 100 --identity_thr 30\n</code></pre> <p></p>"},{"location":"cli-docs/pgv-mmseqs/","title":"pgv-mmseqs","text":"<p><code>pgv-mmseqs</code> is one of the CLI workflows in pyGenomeViz for visualization of homologous CDSs using MMseqs. It can be used to visualize reciprocal best-hit CDSs between each genome.</p> <p></p>"},{"location":"cli-docs/pgv-mmseqs/#installation","title":"Installation","text":""},{"location":"cli-docs/pgv-mmseqs/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge -c bioconda pygenomeviz mmseqs2\n</code></pre>"},{"location":"cli-docs/pgv-mmseqs/#pip","title":"Pip","text":"<pre><code>pip install pygenomeviz\n</code></pre> <p>Additional installation of MMseqs is required. On Ubuntu22.04 or later, MMseqs can be installed with apt command.</p> <pre><code>sudo apt install mmseqs2\n</code></pre>"},{"location":"cli-docs/pgv-mmseqs/#docker","title":"Docker","text":"<pre><code>docker run -it --rm -p 8501:8501 ghcr.io/moshi4/pygenomeviz:latest pgv-mmseqs -h\n</code></pre>"},{"location":"cli-docs/pgv-mmseqs/#usage","title":"Usage","text":"<pre><code>$ pgv-mmseqs --help\nusage: pgv-mmseqs [options] seq1.gbk seq2.gbk seq3.gbk -o outdir\n\npyGenomeViz CLI workflow using MMseqs RBH method\n\npositional arguments:\n  seqs                    Input genbank files\n\nGeneral Options:\n  -o , --outdir           Output directory\n  --formats               Output image format ('png'[*],'jpg','svg','pdf',`html`[*])\n  --reuse                 Reuse previous alignment result if available\n  -q, --quiet             No print log on screen (default: OFF)\n  -v, --version           Print version information\n  -h, --help              Show this help message and exit\n\nMMseqs Alignment Options:\n  --threads               Threads number (Default: MaxThread - 1)\n  --length_thr            Length threshold to be plotted (Default: 0)\n  --identity_thr          Identity threshold to be plotted (Default: 0)\n  --evalue_thr            E-value threshold to be plotted (Default: 1e-03)\n\nFigure Appearence Options:\n  --fig_width             Figure width (Default: 15)\n  --fig_track_height      Figure track height (Default: 1.0)\n  --track_align_type      Figure tracks align type ('left'|'center'[*]|'right')\n  --feature_track_ratio   Feature track ratio (Default: 0.25)\n  --show_scale_bar        Show scale bar (Default: OFF)\n  --show_scale_xticks     Show scale xticks (Default: OFF)\n  --curve                 Plot curved style link (Default: OFF)\n  --dpi                   Figure DPI (Default: 300)\n  --track_labelsize       Track label size (Default: 20)\n  --scale_labelsize       Scale label size (Default: 15)\n  --normal_link_color     Normal link color (Default: 'grey')\n  --inverted_link_color   Inverted link color (Default: 'red')\n  --segment_space         Track segment space ratio (Default: 0.02)\n  --feature_type2color    Feature plot type &amp; color (Default: ['CDS:orange'])\n  --pseudo_color          Pseudo feature plot color (Default: 'lightgrey')\n  --feature_plotstyle     Feature plot style ('[big]arrow'[*]|'[big]box'|'[big]rbox')\n  --feature_linewidth     Feature line width (Default: 0.0)\n  --feature_labeltrack    Feature label target track ('top'[*]|'all')\n  --feature_labeltype     Feature label type ('product'|'gene'|'protein_id'|'None'[*])\n  --feature_labelsize     Feature label size (Default: 8)\n  --cbar_width            Colorbar width (Default: 0.01)\n  --cbar_height           Colorbar height (Default: 0.2)\n\n[*] marker means the default value.\n</code></pre>"},{"location":"cli-docs/pgv-mmseqs/#examples","title":"Examples","text":""},{"location":"cli-docs/pgv-mmseqs/#example-1","title":"Example 1","text":"<p>Download example dataset:</p> <pre><code>pgv-download acinetobacter_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mmseqs NC_049491.gbk NC_049492.gbk NC_049493.gbk NC_049494.gbk \\\n           -o pgv-mmseqs_example1 --track_align_type left --show_scale_xticks\n</code></pre> <p></p>"},{"location":"cli-docs/pgv-mmseqs/#example-2","title":"Example 2","text":"<p>Download example dataset:</p> <pre><code>pgv-download enterobacteria_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mmseqs NC_013600.gbk NC_016566.gbk NC_019724.gbk NC_024783.gbk NC_028901.gbk NC_031081.gbk \\\n           -o pgv-mmseqs_example2 --show_scale_bar --curve --feature_linewidth 0.3 \\\n           --feature_type2color CDS:skyblue --normal_link_color chocolate --inverted_link_color limegreen\n</code></pre> <p></p>"},{"location":"cli-docs/pgv-mmseqs/#example-3","title":"Example 3","text":"<p>Download example dataset:</p> <pre><code>pgv-download mycoplasma_mycoides\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mmseqs GCF_000023685.1.gbff GCF_000800785.1.gbff GCF_000959055.1.gbff GCF_000959065.1.gbff \\\n           -o pgv-mmseqs_example3 --show_scale_bar --feature_type2color CDS:blue rRNA:lime\n</code></pre> <p></p>"},{"location":"cli-docs/pgv-mummer/","title":"pgv-mummer","text":"<p><code>pgv-mummer</code> is one of the CLI workflows in pyGenomeViz for visualization of genome alignment using MUMmer(nucmer, promer).</p> <p></p>"},{"location":"cli-docs/pgv-mummer/#installation","title":"Installation","text":""},{"location":"cli-docs/pgv-mummer/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge -c bioconda pygenomeviz mummer\n</code></pre>"},{"location":"cli-docs/pgv-mummer/#pip","title":"Pip","text":"<pre><code>pip install pygenomeviz\n</code></pre> <p>Additional installation of MUMmer is required. On Ubuntu, MUMmer can be installed with apt command.</p> <pre><code>sudo apt install mummer\n</code></pre>"},{"location":"cli-docs/pgv-mummer/#docker","title":"Docker","text":"<pre><code>docker run -it --rm -p 8501:8501 ghcr.io/moshi4/pygenomeviz:latest pgv-mummer -h\n</code></pre>"},{"location":"cli-docs/pgv-mummer/#usage","title":"Usage","text":"<pre><code>$ pgv-mummer --help\nusage: pgv-mummer [options] seq1.gbk seq2.gbk seq3.gbk -o outdir\n\npyGenomeViz CLI workflow using MUMmer (nucmer, promer)\n\npositional arguments:\n  seqs                    Input genbank files\n\nGeneral Options:\n  -o , --outdir           Output directory\n  --formats               Output image format ('png'[*],'jpg','svg','pdf',`html`[*])\n  --reuse                 Reuse previous alignment result if available\n  -q, --quiet             No print log on screen (default: OFF)\n  -v, --version           Print version information\n  -h, --help              Show this help message and exit\n\nMUMmer Alignment Options:\n  --seqtype               Alignment sequence type ('nucleotide'[*]|'protein')\n  --threads               Threads number (Default: MaxThread - 1)\n  --length_thr            Length threshold to be plotted (Default: 0)\n  --identity_thr          Identity threshold to be plotted (Default: 0)\n\nFigure Appearence Options:\n  --fig_width             Figure width (Default: 15)\n  --fig_track_height      Figure track height (Default: 1.0)\n  --track_align_type      Figure tracks align type ('left'|'center'[*]|'right')\n  --feature_track_ratio   Feature track ratio (Default: 0.25)\n  --show_scale_bar        Show scale bar (Default: OFF)\n  --show_scale_xticks     Show scale xticks (Default: OFF)\n  --curve                 Plot curved style link (Default: OFF)\n  --dpi                   Figure DPI (Default: 300)\n  --track_labelsize       Track label size (Default: 20)\n  --scale_labelsize       Scale label size (Default: 15)\n  --normal_link_color     Normal link color (Default: 'grey')\n  --inverted_link_color   Inverted link color (Default: 'red')\n  --segment_space         Track segment space ratio (Default: 0.02)\n  --feature_type2color    Feature plot type &amp; color (Default: ['CDS:orange'])\n  --pseudo_color          Pseudo feature plot color (Default: 'lightgrey')\n  --feature_plotstyle     Feature plot style ('[big]arrow'[*]|'[big]box'|'[big]rbox')\n  --feature_linewidth     Feature line width (Default: 0.0)\n  --feature_labeltrack    Feature label target track ('top'[*]|'all')\n  --feature_labeltype     Feature label type ('product'|'gene'|'protein_id'|'None'[*])\n  --feature_labelsize     Feature label size (Default: 8)\n  --cbar_width            Colorbar width (Default: 0.01)\n  --cbar_height           Colorbar height (Default: 0.2)\n\n[*] marker means the default value.\n</code></pre> <p>--seqtype Option</p> <p><code>--seqtype nucleotide</code>: nucmer, <code>--seqtype protein</code>: promer</p>"},{"location":"cli-docs/pgv-mummer/#examples","title":"Examples","text":""},{"location":"cli-docs/pgv-mummer/#example-1","title":"Example 1","text":"<p>Download example dataset:</p> <pre><code>pgv-download yersinia_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mummer NC_070914.gbk NC_070915.gbk NC_070916.gbk NC_070918.gbk \\\n           -o pgv-mummer_example1 --show_scale_bar\n</code></pre> <p></p>"},{"location":"cli-docs/pgv-mummer/#example-2","title":"Example 2","text":"<p>Download example dataset:</p> <pre><code>pgv-download enterobacteria_phage\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mummer NC_013600.gbk NC_016566.gbk NC_019724.gbk NC_024783.gbk NC_028901.gbk NC_031081.gbk \\\n           -o pgv-mummer_example2 --seqtype protein --show_scale_bar --curve \\\n           --feature_track_ratio 0.15 --fig_track_height 0.7 --feature_linewidth 0.5 --feature_plotstyle bigarrow \\\n           --feature_type2color CDS:skyblue --normal_link_color chocolate --inverted_link_color limegreen\n</code></pre> <p></p>"},{"location":"cli-docs/pgv-mummer/#example-3","title":"Example 3","text":"<p>Download example dataset:</p> <pre><code>pgv-download mycoplasma_mycoides\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-mummer GCF_000023685.1.gbff GCF_000800785.1.gbff GCF_000959055.1.gbff GCF_000959065.1.gbff \\\n           -o pgv-mummer_example3 --show_scale_bar --curve \\\n           --feature_type2color CDS:blue rRNA:lime tRNA:magenta\n</code></pre> <p></p>"},{"location":"cli-docs/pgv-pmauve/","title":"pgv-pmauve","text":"<p><code>pgv-pmauve</code> is one of the CLI workflows in pyGenomeViz for visualization of genome alignment results using progressiveMauve. It can be used to visualize commonly conserved regions between all genomes.</p> <p></p>"},{"location":"cli-docs/pgv-pmauve/#installation","title":"Installation","text":""},{"location":"cli-docs/pgv-pmauve/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge -c bioconda pygenomeviz progressivemauve\n</code></pre>"},{"location":"cli-docs/pgv-pmauve/#pip","title":"Pip","text":"<pre><code>pip install pygenomeviz\n</code></pre> <p>Additional installation of progressiveMauve is required. On Ubuntu, progressiveMauve can be installed with apt command.</p> <pre><code>sudo apt install progressivemauve\n</code></pre>"},{"location":"cli-docs/pgv-pmauve/#docker","title":"Docker","text":"<pre><code>docker run -it --rm -p 8501:8501 ghcr.io/moshi4/pygenomeviz:latest pgv-pmauve -h\n</code></pre>"},{"location":"cli-docs/pgv-pmauve/#usage","title":"Usage","text":"<pre><code>$ pgv-pmauve --help\nusage: pgv-pmauve [options] seq1.gbk seq2.gbk seq3.gbk -o outdir\n\npyGenomeViz CLI workflow using progressiveMauve\n\npositional arguments:\n  seqs                    Input genbank or fasta files\n\nGeneral Options:\n  -o , --outdir           Output directory\n  --formats               Output image format ('png'[*],'jpg','svg','pdf',`html`[*])\n  --reuse                 Reuse previous alignment result if available\n  -q, --quiet             No print log on screen (default: OFF)\n  -v, --version           Print version information\n  -h, --help              Show this help message and exit\n\nFigure Appearence Options:\n  --fig_width             Figure width (Default: 15)\n  --fig_track_height      Figure track height (Default: 1.0)\n  --track_align_type      Figure tracks align type ('left'|'center'[*]|'right')\n  --feature_track_ratio   Feature track ratio (Default: 0.25)\n  --show_scale_bar        Show scale bar (Default: OFF)\n  --show_scale_xticks     Show scale xticks (Default: OFF)\n  --curve                 Plot curved style link (Default: OFF)\n  --dpi                   Figure DPI (Default: 300)\n  --track_labelsize       Track label size (Default: 20)\n  --scale_labelsize       Scale label size (Default: 15)\n  --normal_link_color     Normal link color (Default: 'grey')\n  --inverted_link_color   Inverted link color (Default: 'red')\n  --refid                 Reference genome index (Default: 0)\n  --block_plotstyle       Synteny block plot style ('box'[*]|'bigbox')\n  --block_cmap            Synteny block colormap (Default: 'gist_rainbow')\n\n[*] marker means the default value.\n</code></pre> <p>Multi Contigs Input Case</p> <p>progressiveMauve cannot align for multiple contigs.  Therefore, when multiple contigs are included in the input,  a sequence that concatenates the multiple contigs into one is used as the input.</p> <p>Colormap(--block_cmap) Option</p> <p>User can arbitrarily choose the visualization colormap from  the various colormap types in matplotlib. See Choosing Colormaps in Matplotlib for details.</p>"},{"location":"cli-docs/pgv-pmauve/#examples","title":"Examples","text":""},{"location":"cli-docs/pgv-pmauve/#example-1","title":"Example 1","text":"<p>Download example dataset:</p> <pre><code>pgv-download escherichia_coli\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-pmauve NC_000913.gbk.gz NC_002695.gbk.gz NC_011751.gbk.gz NC_011750.gbk.gz \\\n           -o pgv-pmauve_example1 --show_scale_bar\n</code></pre> <p></p>"},{"location":"cli-docs/pgv-pmauve/#example-2","title":"Example 2","text":"<p>Download example dataset:</p> <pre><code>pgv-download mycoplasma_mycoides\n</code></pre> <p>Run CLI workflow:</p> <pre><code>pgv-pmauve GCF_000023685.1.gbff GCF_000800785.1.gbff GCF_000959055.1.gbff GCF_000959065.1.gbff \\\n           -o pgv-pmauve_example2 --feature_track_ratio 0.15 --block_cmap viridis --track_align_type left \\\n           --show_scale_xticks --curve\n</code></pre> <p></p>"},{"location":"gui-docs/pgv-gui/","title":"pgv-gui","text":"<p><code>pgv-gui</code> command is used to launch the pyGenomeViz Web Application. It is developed with the streamlit web application framework, and users can easily visualize the genomic features of Genbank files and their comparison results with GUI.</p> <p> </p>      pyGenomeViz web application example (Demo Page)"},{"location":"gui-docs/pgv-gui/#installation","title":"Installation","text":"<p>Additional installation of streamlit is required. BLAST, MUMmer, MMseqs are also required to enable the genome comparison functionality.</p>"},{"location":"gui-docs/pgv-gui/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge -c bioconda pygenomeviz streamlit blast mummer mmseqs2\n</code></pre>"},{"location":"gui-docs/pgv-gui/#pip","title":"Pip","text":"<pre><code>pip install pygenomeviz[gui]\n</code></pre> <p>On Ubuntu22.04 or later, BLAST, MUMmer, MMseqs can be installed with apt command.</p> <pre><code>sudo apt install ncbi-blast+ mummer mmseqs2\n</code></pre>"},{"location":"gui-docs/pgv-gui/#docker","title":"Docker","text":"<pre><code>docker run -it --rm -p 8501:8501 ghcr.io/moshi4/pygenomeviz:latest pgv-gui\n</code></pre>"},{"location":"gui-docs/pgv-gui/#usage","title":"Usage","text":"<pre><code>$ pgv-gui --help\nusage: pgv-gui [options]\n\npyGenomeViz CLI for launching Streamlit Web Application\n\nUsers can access the web app with http://localhost:8501 (default).\n\noptional arguments:\n  -p , --port    Port number to open web browser (Default: 8501)\n  -v, --version  Print version information\n  -h, --help     Show this help message and exit\n</code></pre> <p>Info</p> <p>By uploading a user Genbank file with a browser, a visualization figure of each genomic feature is automatically displayed. By setting each widget value, user can interactively change the appearance of the figure, genome comparison method, etc.</p> <p></p>"}]}